[[ogm-configuration]]

== Configure and start Hibernate OGM

Hibernate OGM favors ease of use and convention over configuration.
This makes its configuration quite simple by default.

=== Bootstrapping Hibernate OGM

Hibernate OGM can be used via the Hibernate native APIs (`Session`)
or via the JPA APIs (`EntityManager`).
Depending on your choice, the bootstrapping strategy is slightly different.

==== Using JPA

If you use JPA as your primary API, the configuration is extremely simple.
Hibernate OGM is seen as a persistence provider
which you need to configure in your [filename]`persistence.xml`.
That's it!
The provider name is `org.hibernate.ogm.jpa.HibernateOgmPersistence`.

.persistence.xml file
====
[source, XML]
----
<?xml version="1.0"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">

    <persistence-unit name="org.hibernate.ogm.tutorial.jpa" transaction-type="JTA">
        <!-- Use Hibernate OGM provider: configuration will be transparent -->
        <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>
        <properties>
            <property name="hibernate.transaction.jta.platform"
                      value="JBossTS" />
            <property name="hibernate.ogm.datastore.provider"
                      value="infinispan_embedded" />
        </properties>
    </persistence-unit>
</persistence>
----
====

There are a couple of things to notice:

* there is no JDBC dialect setting
* there is no JDBC setting except sometimes a `jta-data-source`
  (check <<ogm-configuration-environments-javaee>> for more info)
* most NoSQL databases do not require a schema, in which case schema generation options (`hbm2ddl`)
  do not apply
* if you use JTA (which we recommend), you will need to set the JTA platform


You also need to configure which NoSQL datastore you want to use
and how to connect to it.
We will detail how to do that later in <<ogm-datastore-providers>>.

In this case, we have used the default settings for Infinispan:
this will start a local, in-memory Infinispan instance which is useful for testing
but the stored data will be lost on shutdown.
You might think of this configuration as similar to storing your data in an hashmap,
but you could of course change the Infinispan configuration to enable clustering
(for both scalability and failover) and to enable permanent persistence strategies.

From there, simply bootstrap JPA the way you are used to with Hibernate ORM:

* via `Persistence.createEntityManagerFactory`
* by injecting the `EntityManager` / `EntityManagerFactory` in a Java EE container
* by using your favorite injection framework (CDI - Weld, Spring, Guice)

[NOTE]
====
Note that what you're starting is not an exotic new JPA implementation but is in all effects
an instance of Hibernate ORM, although using some alternative internal components to deal
with the NoSQL stores.
This means that any framework and tool integrating with Hibernate ORM can integrate with
Hibernate OGM - of course as long as it's not making assumptions such as that a JDBC
datasource will be used.
====


==== Using Hibernate ORM native APIs

If you want to bootstrap Hibernate OGM using the native Hibernate APIs,
use the new bootstrap API from Hibernate ORM 5.
By setting `OgmProperties.ENABLED` to true, the Hibernate OGM components will be activated.
Note that unwrapping into `OgmSessionFactoryBuilder` is not strictly needed,
but it will allow you to set Hibernate OGM specific options in the future and also gives you a reference
to `OgmSessionFactory` instead of `SessionFactory`.

.Bootstrap Hibernate OGM with Hibernate ORM native APIs
====
[source, JAVA]
----
StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
    .applySetting( OgmProperties.ENABLED, true )
    //assuming you are using JTA in a non container environment
    .applySetting( AvailableSettings.TRANSACTION_COORDINATOR_STRATEGY, "jta" )
    //assuming JBoss TransactionManager in standalone mode
    .applySetting( AvailableSettings.JTA_PLATFORM, "JBossTS" )
    //assuming Infinispan as the backend, using the default settings
    .applySetting( OgmProperties.DATASTORE_PROVIDER, InfinispanEmbedded.DATASTORE_PROVIDER_NAME );
    .build();

//build the SessionFactory
OgmSessionFactory sessionFactory = new MetadataSources( registry )
    .addAnnotatedClass( Order.class )
    .addAnnotatedClass( Item.class )
    .buildMetadata()
    .getSessionFactoryBuilder()
    .unwrap( OgmSessionFactoryBuilder.class )
    .build();
----
====

There are a couple of things to notice:

* there is no DDL schema generation options (`hbm2ddl`)
  as Infinispan does not require schemas when running in embedded mode
* you need to set the right transaction strategy
  and the right transaction manager lookup strategy
  if you use a JTA based transaction strategy
  (see <<ogm-configuration-environments>>)


You also need to configure which NoSQL datastore you want to use
and how to connect to it.
We will detail how to do that later in <<ogm-datastore-providers>>.
In this case, we have used the defaults settings for Infinispan.

[[ogm-configuration-environments]]

=== Environments

Hibernate OGM runs in various environments: it should work pretty much in all environments in which Hibernate ORM runs.
There are however some selected environments in which it was tested more thoroughly than others.
The current version is being tested regularly in Java SE (without a container) and within the WildFly {wildfly-short-version} application server;
at time of writing this there's no known reason for it to not work in different containers as long as you remember that it requires a
specific version of Hibernate ORM: some containers might package a conflicting version.

[[ogm-configuration-environments-javaee]]

==== In a Java EE container

You don't have to do much in this case. You need three specific settings:

* the transaction coordinator type
* the JTA platform
* a JTA datasource


If you use JPA, simply set the `transaction-type` to `JTA`
and the transaction factory will be set for you.

If you use Hibernate ORM native APIs only,
then set `hibernate.transaction.coordinator_class` to "jta".

Set the JTA platform to the right Java EE container.
The property is `hibernate.transaction.jta.platform`
and must contain the fully qualified class name of the lookup implementation.
The list of available values are listed in
https://docs.jboss.org/hibernate/orm/{hibernate-orm-major-minor-version}/userguide/html_single/Hibernate_User_Guide.html#transactions-physical-jtaplatform[Hibernate ORM's configuration section].
For example in WildFly {wildfly-short-version} you would pick `JBossAS`, although in WildFly these settings are automatically injected so you could skip this.

In your [filename]`persistence.xml` you usually need to define an existing datasource.
This is not needed by Hibernate OGM: it will ignore the datasource, but JPA specification mandates the setting.

.persistence.xml file
====
[source, XML]
----
<?xml version="1.0"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">

    <persistence-unit name="org.hibernate.ogm.tutorial.jpa" transaction-type="JTA">
        <!-- Use Hibernate OGM provider: configuration will be transparent -->
        <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>
        <jta-data-source>java:/DefaultDS</jta-data-source>
        <properties>
            <property name="hibernate.transaction.jta.platform" value="JBossAS" />
            <property name="hibernate.ogm.datastore.provider" value="infinispan_embedded" />
        </properties>
    </persistence-unit>
</persistence>
----
====

`java:DefaultDS` will work for out of the box WildFly deployments.

[[ogm-configuration-environments-standalonejta]]

==== In a standalone JTA environment

There is a set of common misconceptions in the Java community about JTA:

* JTA is hard to use
* JTA is only needed when you need transactions spanning several databases
* JTA works in Java EE only
* JTA is slower than "simple" transactions

None of these are true: let me show you how to use the Narayana Transactions Manager in a standalone environment with Hibernate OGM.

In Hibernate OGM, make sure to set the following properties:

* `transaction-type` to `JTA` in your persistence.xml if you use JPA
* or `hibernate.transaction.coordinator_class` to "jta"
  if you use `StandardServiceRegistryBuilder`/`OgmConfiguration` to bootstrap Hibernate OGM.
* `hibernate.transaction.jta.platform` to `JBossTS` in both cases.


Add the Narayana Transactions Manager to your classpath.
If you use maven, it should look like this:

.Narayana Transactions Manager dependency declaration
====
[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
    <groupId>org.jboss.narayana.jta</groupId>
    <artifactId>narayana-jta</artifactId>
    <version>{jboss-jta-version}</version>
</dependency>
----
====

The next step is you get access to the transaction manager.
The easiest solution is to do as the following example:

[source, JAVA]
----
TransactionManager transactionManager =
   com.arjuna.ats.jta.TransactionManager.transactionmanager();
----

Then use the standard JTA APIs to demarcate your transaction and you are done!

.Demarcate your transaction with standalone JTA
====
[source, JAVA]
----
//note that you must start the transaction before creating the EntityManager
//or else call entityManager.joinTransaction()
transactionManager.begin();

final EntityManager em = emf.createEntityManager();

Poem poem = new Poem();
poem.setName("L'albatros");
em.persist(poem);

transactionManager.commit();

em.clear();

transactionManager.begin();

poem = em.find(Poem.class, poem.getId());
assertThat(poem).isNotNull();
assertThat(poem.getName()).isEqualTo("L'albatros");
em.remove(poem );

transactionManager.commit();

em.close();
----
====

That was not too hard, was it?
Note that application frameworks like the Spring Framework should be able to initialize the transaction manager
and call it to demarcate transactions for you.
Check their respective documentation.

==== Without JTA

While this approach works today, it does not ensure that operations are done transactionally
and hence won't be able to rollback your work.
This will change in the future but in the mean time,
such an environment is not recommended.

[NOTE]
====
For NoSQL datastores not supporting transactions, this is less of a concern.
====

[[ogm-configuration-optionsogm-configuration-options]]

=== Configuration options

The most important options when configuring Hibernate OGM are related to the datastore.
They are explained in <<ogm-datastore-providers>>.

Otherwise, most options from Hibernate ORM and Hibernate Search are applicable
when using Hibernate OGM.
You can pass them as you are used to do
either in your [filename]`persistence.xml` file, your [filename]`hibernate.cfg.xml` file
or programmatically.

More interesting is a list of options that do _not_ apply to Hibernate OGM
and that should not be set:

* `hibernate.dialect`
* `hibernate.connection.*` and in particular `hibernate.connection.provider_class`
* `hibernate.show_sql` and `hibernate.format_sql`
* `hibernate.default_schema` and `hibernate.default_catalog`
* `hibernate.use_sql_comments`
* `hibernate.jdbc.*`
* `hibernate.hbm2ddl.auto` and `hibernate.hbm2ddl.import_file`

=== Configuring Hibernate Search

Hibernate Search integrates with Hibernate OGM just like it does with Hibernate ORM.
The Hibernate Search version tested is {hibernate-search-version}.
Add the dependency to your project - the group id is `org.hibernate` and artifact id `hibernate-search-orm`.

Then configure where you want to store your indexes,
map your entities with the relevant index annotations and you are good to go.
For more information, simply check the
https://docs.jboss.org/hibernate/search/{hibernate-search-major-minor-version}/reference/en-US/html_single/[Hibernate Search reference documentation].

In <<ogm-infinispan-indexstorage>> we'll discuss how to store your Lucene indexes in Infinispan.
This is useful even if you don't plan to use Infinispan as your primary data store.

[NOTE]
====
Hibernate OGM requires Hibernate Search on the classpath only when you need to run JPQL or HQL
queries with some datastores. This is because some datastores don't have a query language or
we don't support it yet. In this situation you need to index the entities that you want to query
and Hibernate OGM will convert the queries in Lucene queries. Check the paragraph related
to the datastore of your choice to see if it requires Hibernate Search or not.
====

[[ogm-configuration-jbossmodule]]

=== How to package Hibernate OGM applications for WildFly {wildfly-short-version}

Provided you're deploying on WildFly,
there is an additional way to add the OGM dependencies to your application.

In WildFly, class loading is based on modules; this system defines explicit, non-transitive dependencies on other modules.

Modules allow to share the same artifacts across multiple applications,
making deployments smaller and quicker, and also making it possible to deploy multiple different versions of any library.

More details about modules are described in
https://docs.jboss.org/author/display/WFLY10/Class+Loading+in+WildFly[Class Loading in WildFly].

When deploying a JPA application on WildFly, you should be aware that there are some additional useful configuration properties defined by the WildFly JPA subsystem.
These are documented in https://docs.jboss.org/author/display/WFLY10/JPA+Reference+Guide[WildFly JPA Reference Guide].

If you apply the following instructions you can create small and efficient deployments which do not include any dependency,
as you can include your favourite version of Hibernate OGM directly to the collection of container provided libraries.

==== Packaging Hibernate OGM applications for WildFly {wildfly-short-version}

When using WildFly several of the technologies it includes are automatically enabled.
For example Hibernate ORM is made available to your applications if your `persistence.xml`
defines a persistence unit using Hibernate as persistence provider
(or is not specifying any provider, as Hibernate is the default one).

Similarly, Hibernate Search is automatically activated and made available on the user's application
classpath if and when the application server detects the need for it.
This is the default behaviour, but you are in control and can override this all;
see the https://docs.jboss.org/author/display/WFLY10/JPA+Reference+Guide[WildFly JPA Reference Guide]
for a full list of properties you can explicitly set.

WildFly {wildfly-short-version} however does not include Hibernate OGM and the compatible Hibernate ORM and Hibernate Search
versions and it will require some configuration to make everything works.

Hibernate OGM {hibernate-ogm-version} requires Hibernate ORM {hibernate-orm-version} and Hibernate Search {hibernate-search-version}.

===== Server provisioning via Maven

Maven users can use the `wildfly-server-provisioning-maven-plugin`
to create a custom WildFly server including the Hibernate OGM modules:
====
[source, XML]
[subs="verbatim,attributes"]
----
<plugins>
	<plugin>
		<groupId>org.wildfly.build</groupId>
		<artifactId>wildfly-server-provisioning-maven-plugin</artifactId>
		<version>1.2.10.Final</version>
		<executions>
			<execution>
			<id>server-provisioning</id>
			<goals>
				<goal>build</goal>
			</goals>
			<phase>compile</phase>
			<configuration>
				<config-file>server-provisioning.xml</config-file>
				<server-name>wildfly-with-hibernate-ogm</server-name>
			</configuration>
			</execution>
		</executions>
	</plugin>
</plugins>
====

You will also need a `server-provisioning.xml` in the root of your project:

====
[source, XML]
[subs="verbatim,attributes"]
----
<server-provisioning xmlns="urn:wildfly:server-provisioning:1.1">
	<feature-packs>

		<feature-pack
			groupId="org.hibernate"
			artifactId="hibernate-search-jbossmodules-orm"
			version="{hibernate-search-version}" /> # <1>

		<feature-pack
			groupId="org.hibernate.ogm"
			artifactId="hibernate-ogm-featurepack-infinispan-remote"
			version="{hibernate-ogm-version}" /> # <2>

		<feature-pack
			groupId="org.hibernate.ogm"
			artifactId="hibernate-ogm-featurepack-infinispan-embedded"
			version="{hibernate-ogm-version}" /> # <2>

		<feature-pack
			groupId="org.hibernate.ogm"
			artifactId="hibernate-ogm-featurepack-mongodb"
			version="{hibernate-ogm-version}" /> # <2>

		<feature-pack
			groupId="org.hibernate.ogm"
			artifactId="hibernate-ogm-featurepack-neo4j"
			version="{hibernate-ogm-version}" /> # <2>

	</feature-packs>
</server-provisioning>
----
<1> Add Hibernate Search feature pack, if you need it.
<2> Add one or more Hibernate OGM feature packs, it depends on which dialects your application needs.
====

. See https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#hibernatesearch-jboss-modules-feature-packs[list of available Hibernate Search feature packs].
. See <<hibernate-ogm-jboss-modules-feature-packs, list of available Hibernate OGM feature packs>>.

Once you have the archives, you need to 
unpack them into the `modules` folder of your WildFly {wildfly-short-version} installation.
The modules included are:

* _org.hibernate.ogm_, the core Hibernate OGM library.
* _org.hibernate.ogm.<%DATASTORE%>_, one module for each datastore, with _<%DATASTORE%>_ being one of _infinispan_, _mongodb_ etc.
* _org.hibernate.orm_, the Hibernate ORM libraries.
* _org.hibernate.search_, the Hibernate Search libraries.
* Several shared dependencies such as _org.hibernate.hql:<%VERSION%>_ (containing the query parser) and others

The module slot to use for Hibernate OGM {hibernate-ogm-version} is `{hibernate-ogm-module-slot}`
as the format of the slot name does not include the "micro" part of the project version.

You will also need to set the property `wildfly.jpa.hibernate.search.module`
to `org.hibernate.search.orm:{hibernate-search-module-slot}` in your `persistence.xml`.
This way your application will use the right Hibernate ORM and Hibernate Search version
(and not the one shipped with WildFly).

.Property for enabling a Hibernate Search and Hibernate ORM version compatible with Hibernate OGM
====
[source, XML]
[subs="verbatim,attributes"]
----
<property name="wildfly.jpa.hibernate.search.module" value="org.hibernate.search.orm:{hibernate-search-module-slot}"/>
----
====

Now that WildFly is ready, you can include the dependencies in your application in two ways:

Include dependencies using the manifest::
Add this entry to the MANIFEST.MF in your archive (replace _<%DATASTORE%>_ with the right value for your chosen datastore):

[source]
[subs="verbatim,attributes"]
----
Dependencies: org.hibernate.ogm:{hibernate-ogm-module-slot} services, org.hibernate.ogm.<%DATASTORE%>:{hibernate-ogm-module-slot} services
----

Include dependencies using jboss-deployment-structure.xml::
This is a JBoss-specific descriptor.
Add a `WEB-INF/jboss-deployment-structure.xml` in your archive with the following content (replace _<%DATASTORE%>_ with the right value for your chosen datastore):

[source, XML]
[subs="verbatim,attributes"]
----
<jboss-deployment-structure>
    <deployment>
        <dependencies>
            <module name="org.hibernate.ogm" slot="{hibernate-ogm-module-slot}" services="export" />
            <module name="org.hibernate.ogm.<%DATASTORE%>" slot="{hibernate-ogm-module-slot}" services="export" />
        </dependencies>
    </deployment>
</jboss-deployment-structure>
----

More information about the descriptor can be found in the
https://docs.jboss.org/author/display/WFLY10/Class+Loading+in+WildFly[WildFly documentation].

More information about Maven Wildfly provisioning plugin can be found in the
https://github.com/wildfly/wildfly-build-tools[WildFly provisioning build tools].

If you are not using Maven in your project, there is also a Gradle plugin
https://plugins.gradle.org/plugin/org.wildfly.build.provision[org.wildfly.build.provision]
available on the official portal.

[[hibernate-ogm-jboss-modules-feature-packs]]
==== List of the Hibernate OGM WildFly/JBoss feature packs

===== Core feature pack

It contains the core of Hibernate OGM and all the dialects feature packs extend it.

It extends the base WildFly feature pack distribution.
It includes Hibernate ORM {hibernate-orm-version} modules, required by Hibernate OGM {hibernate-ogm-version}.

The feature pack is published on the JBoss Nexus repository and Maven Central as
link:$$https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate.ogm~hibernate-ogm-featurepack-core~{hibernate-ogm-version}~~$$[org.hibernate.ogm:hibernate-ogm-featurepack-core:{hibernate-ogm-version}:zip].

===== Infinispan Remote feature pack

This is the Infinispan Remote dialect feature pack.
It includes the main module:

* _org.hibernate.ogm.infinispan-remote_, containing Hibernate OGM Infinispan Remote module

It includes Hibernate OGM core feature pack and Infinispan client Wildfly modules.
The feature pack is published on the JBoss Nexus repository and Maven Central as
link:$$https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate.ogm~hibernate-ogm-featurepack-infinispan-remote~{hibernate-ogm-version}~~$$[org.hibernate.ogm:hibernate-ogm-featurepack-infinispan-remote:{hibernate-ogm-version}:zip].

===== Infinispan Embedded feature pack

This is the Infinispan Embedded dialect feature pack.
It includes the main module:

* _org.hibernate.ogm.infinispan-embedded_, containing Hibernate OGM Infinispan Embedded module

It includes Hibernate OGM core feature pack and Infinispan client Wildfly modules.
The feature pack is published on the JBoss Nexus repository and Maven Central as
link:$$https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate.ogm~hibernate-ogm-featurepack-infinispan-embedded~{hibernate-ogm-version}~~$$[org.hibernate.ogm:hibernate-ogm-featurepack-infinispan-embedded:{hibernate-ogm-version}:zip].

===== MongoDB feature pack

This is the MongoDB dialect feature pack.
It includes the main module:

* _org.hibernate.ogm.mongodb_, containing Hibernate OGM MongoDB module

It includes Hibernate OGM core feature pack and MongoDB Java client.
The feature pack is published on the JBoss Nexus repository and Maven Central as
link:$$https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate.ogm~hibernate-ogm-featurepack-mongodb~{hibernate-ogm-version}~~$$[org.hibernate.ogm:hibernate-ogm-featurepack-mongodb:{hibernate-ogm-version}:zip].

===== Neo4j feature pack

This is the Neo4j dialect feature pack.
It includes the main module:

* _org.hibernate.ogm.neo4j_, containing Hibernate OGM Neo4j module

It includes Hibernate OGM core feature pack and Neo4j client libraries.
The feature pack is published on the JBoss Nexus repository and Maven Central as
link:$$https://repository.jboss.org/nexus/index.html#nexus-search;gav~org.hibernate.ogm~hibernate-ogm-featurepack-neo4j~{hibernate-ogm-version}~~$$[org.hibernate.ogm:hibernate-ogm-featurepack-neo4j:{hibernate-ogm-version}:zip].

==== Configure your persistence.xml to use your choice of persistence provider

WildFly will by default attempt to guess which Persistence Provider you need by having a look at the `provider` section of the `persistence.xml`.

==== Enable support for EE 8

Hibernate OGM {hibernate-ogm-version} requires **CDI 2.0** and **JPA 2.2**, that belong to **EE 8** specification.
WildFly 13 has support for JavaEE 8.

But in order to enable required CDI and JPA versions we need to start the server with __ee8.preview.mode__ Java system property set to **true** :

----
-Dee8.preview.mode=true
----

==== Using the Hibernate OGM modules with Infinispan

The Infinispan project also provides custom modules for WildFly {wildfly-short-version}.
Hibernate OGM modules require these modules if you're planning to use the Hibernate OGM / Infinispan combination on WildFly.

This release of Hibernate OGM was tested exclusively with Infinispan version {infinispan-version};
the Infinispan project generally attempts to maintain the same API and integration points within the same major.minor version,
so a micro version update should be safe but is untested.

In case you want to experiment with a more significant version upgrade, you will need to edit the modules of Hibernate OGM:
the module identifiers are hardcoded in the XML files representing the module.

Download the Infinispan modules pack for WildFly {wildfly-short-version} from here:

 * https://repo1.maven.org/maven2/org/infinispan/infinispan-as-embedded-modules/{infinispan-version}/infinispan-as-embedded-modules-{infinispan-version}.zip[Infinispan WildFly modules version {infinispan-version} from the Maven repository]

Then similarly to what you did with the Hibernate OGM modules zip, unpack this one too in your `modules` directory within the application server.

[NOTE]
====
If you are using the Hibernate OGM Infinispan feature packs, you don't have to worry about this. Infinispan client is already included in them.
====

[[integration-with-wildfly-nosql]]

=== Integration with WildFly NoSQL

_WildFly NoSQL_ project allows to configure a NoSQL datastore client within a WildFly subsystem.
See https://github.com/wildfly/wildfly-nosql/tree/master/doc[WildFly NoSQL Documentation].
In a nutshell it provides the analogous concept of a _SQL DataSource_ for a NoSQL datastore.

It is possible to configure Hibernate OGM to use the connections provided by WildFly NoSQL,
using a special Hibernate property: `hibernate.connection.resource`.

[NOTE]
====
At the time of writing the feature and its property are supported only for _MongoDB_ and _Neo4j Bolt_ clients.
====

==== How to use WildFly NoSQL with Hibernate OGM

A typical Hibernate OGM persistence configuration, without the support of WildFly NoSQL, looks like this:
[source, XML]
[subs="verbatim,attributes"]
----
<persistence version="2.1"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="primary" transaction-type="JTA">
    <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>
    <properties>
      <property name="hibernate.ogm.datastore.provider" value="mongodb" />
      <property name="hibernate.ogm.datastore.create_database" value="true"/>
      <property name="hibernate.ogm.datastore.host" value="localhost:27018"/>
      <property name="hibernate.ogm.datastore.database" value="mongodb"/>
      <property name="hibernate.ogm.mongodb.write_concern" value="JOURNALED"/>
      <property name="hibernate.ogm.mongodb.read_preference" value="NEAREST"/>
    </properties>
  </persistence-unit>
</persistence>
----

Some configurations, like the hostname, port, name of the database
and other datastore specific properties can be refactored/moved to a WildFly NoSQL subsystem, like this:

[source, XML]
[subs="verbatim,attributes"]
----
<subsystem xmlns="urn:jboss:domain:mongodb:1.0">
	<mongo name="default" id="mongodb" jndi-name="java:jboss/mongodb/client" database="mongodb" module="org.hibernate.ogm.mongodb">
		<host name="default" outbound-socket-binding-ref="mongodb"/>
		<properties name="default">
			<property name="writeConcern" value="JOURNALED"/>
			<property name="readConcern" value="LOCAL"/>
		</properties>
	</mongo>
</subsystem>
----

Notice that here the *jndi-name* attribute defines the String for the external lookup,
it will be used later in this chapter.
While *module* attribute indicates the static module from which to load client driver.

[NOTE]
====
If you have provisioned your WildFly with Hibernate OGM featurepack(s),
which is also the recommanded practice if you use WildFly,
module attribute will be *org.hibernate.ogm.mongodb* for MongoDB driver
or *org.hibernate.ogm.neo4j* for Neo4j driver.
====

Moreover you should have a WildFly socket binding like this one:

[source, XML]
[subs="verbatim,attributes"]
----
<socket-binding-group ...
	<outbound-socket-binding name="mongodb">
		<remote-destination host="localhost" port="27018"/>
	</outbound-socket-binding>
</socket-binding-group>
----

At this point you can use the Hibernate property `hibernate.connection.resource` in your _persistence.xml_,
to integrate WildFly NoSQL with your Hibernate OGM.

In our case we will have:
[source, XML]
[subs="verbatim,attributes"]
----
<persistence version="2.1"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
  <persistence-unit name="primary" transaction-type="JTA">
    <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>
    <properties>
      <property name="hibernate.ogm.datastore.provider" value="mongodb" />
      <property name="*hibernate.connection.resource*" value="*java:jboss/mongodb/client*"/>
      <property name="hibernate.ogm.datastore.create_database" value="true"/>
    </properties>
  </persistence-unit>
</persistence>
----
