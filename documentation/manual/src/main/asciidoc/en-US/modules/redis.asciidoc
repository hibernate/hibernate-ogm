[[ogm-redis]]

== Redis (Experimental)

http://redis.io/[Redis] is a key-value datastore
which stores your data in a variety of data structures. Although there is no one-and-only style
how to map data between data structures and Redis, two major styles are are most common:

* Storing entities as JSON documents
* Storing entities as a bunch of String-based key-value pairs

[NOTE]
====
Support for Redis is considered an EXPERIMENTAL feature as of this release.
In particular you should be prepared for possible changes to the persistent representation of mapped objects in future releases.

Also be aware of the fact that partial updates are unsupported at the moment
Instead always the entire document will be replaced during updates.
This means that fields possibly written by other applications but not mapped to properties in your domain model will get lost.

The `ASSOCIATION_DOCUMENT` mode for storing associations should be used with care
as there is potential for lost updates (https://hibernate.atlassian.net/browse/OGM-461[OGM-461]).
It is recommended to use the `IN_ENTITY` mode (which is the default).

Should you find any bugs or have feature requests for this dialect,
then please open a ticket in the https://hibernate.atlassian.net/browse/OGM[OGM issue tracker].
====

=== Configuring Redis

Hibernate OGM uses the https://github.com/mp911de/lettuce[lettuce] library to talk to Redis,
so you need the client libraries to use Hibernate OGM Redis.

The following properties are available to configure Redis support in Hibernate OGM:

.Redis datastore configuration properties
hibernate.ogm.datastore.provider::
To use Redis as a datastore provider, this property must be set to `redis_experimental`
hibernate.ogm.datastore.host::
The hostname and port of the Redis instance.
The optional port is concatenated to the host and separated by a colon.
Let's see a few valid examples:

* `redis.example.com`
* `redis.example.com:6379`
+
Listing multiple initial hosts for fault tolerance is not supported.
The default value is `127.0.0.1:6379`. If left undefined, the default port is `6379`.
hibernate.ogm.datastore.port::
Deprecated: use `hibernate.ogm.datastore.host`.
The port used by the Redis instance.
The default value is `6379`.
hibernate.ogm.datastore.database::
The database number to connect to. If left undefined, the default port is `0`.
Note that Redis databases are identified with a number from `0` to `16`.
hibernate.ogm.datastore.password::
The password used to connect to the Redis server.
This property has no default value.
hibernate.ogm.redis.ssl::
Boolean flag to enable SSL connections to Redis. Note that Redis does not support native SSL and SSL is provided
by tools like https://www.stunnel.org/[stunnel]
hibernate.ogm.redis.connection_timeout::
Defines the timeout used by the driver
when the connection to the Redis instance is initiated.
This configuration is expressed in milliseconds.
The default value is `5000`.
hibernate.ogm.redis.expiry::
Defines the expiry for entities and associations.
Expiry can be configured on entity and association level (see <<ogm-redis-annotation-configuration>>
This property has no default value.
hibernate.ogm.error_handler::
The fully-qualified class name, class object or an instance of `ErrorHandler` to get notified upon errors during flushes (see <<ogm-api-error-handler>>)
hibernate.ogm.datastore.redis.entity_storage::
Defines the way OGM stores entity information in Redis.
The following two strategies exist (values of the `org.hibernate.ogm.datastore.redis.options.EntityStorageType` enum):
* `JSON` (store entities as JSON documents with a key) and
* `HASH` (store entities within hashes. The fields and values are represented as strings within the hash).

`JSON` is the default and recommended option. `HASH` is limited to data types which can be represented as strings.
Embedded associations, maps and lists are not supported by the `HASH` storage strategy.

hibernate.ogm.datastore.redis.association_storage::
Defines the way OGM stores association information in Redis.
The following two strategies exist (values of the `org.hibernate.ogm.datastore.document.options.AssociationStorageType` enum):
`IN_ENTITY` (store association information within the entity) and
`ASSOCIATION_DOCUMENT` (store association information in a dedicated document per association).
`IN_ENTITY` is the default and recommended option
unless the association navigation data is much bigger than the core of the document and leads to performance degradation.

[NOTE]
====
When bootstrapping a session factory or entity manager factory programmatically,
you should use the constants accessible via `RedisProperties`
when specifying the configuration properties listed above.
Common properties shared between stores are declared on `OgmProperties`.
To ease migration between stores, it is recommended to reference these constants directly from there.
====

[[ogm-redis-annotation-configuration]]
==== Annotation based configuration

Hibernate OGM allows to configure store-specific options via Java annotations.
When working with the Redis backend, you can specify how associations should be stored
using the `AssociationStorage` annotation
(refer to <<ogm-redis-storage-principles>> to learn more about association storage strategies in general).

The following shows an example:

.Configuring the association storage strategy using annotations
====
[source, JAVA]
----
@Entity
@AssociationStorage(AssociationStorageType.ASSOCIATION_DOCUMENT)
public class Zoo {

    @OneToMany
    private Set<Animal> animals;

    @OneToMany
    private Set<Person> employees;

    @OneToMany
    @AssociationStorage(AssociationStorageType.IN_ENTITY)
    private Set<Person> visitors;

    //...
}
----
====

.Configuring the TTL/expiry using annotations
====
[source, JAVA]
----
@Entity
@TTL(value = 7, unit = TimeUnit.DAYS)
public class Zoo {

    @OneToMany
    private Set<Animal> animals;

    @OneToMany
    private Set<Person> employees;

    //...
}
----
====

Redis supports a native TTL/expiry mechanism. Keys can expire at a date or after a certain period.
Hibernate OGM allows to specify a TTL value on entities and associations. The TTL is set after persisting
the entity using the http://redis.io/commands/pexpire[PEXPIRE] command. Every write to Redis will
set a new TTL.

The annotation on the entity level expresses that all associations of the `Zoo`
class should be stored in separate assocation documents.
This setting applies to the `animals` and `employees` associations.
Only the elements of the `visitors` association will be stored in the document of the corresponding `Zoo` entity
as per the configuration of that specific property which takes precedence over the entity-level configuration.

[[ogm-redis-storage-principles]]
=== Storage principles

Hibernate OGM tries to make the mapping to the underlying datastore as natural as possible
so that third party applications not using Hibernate OGM can still read
and update the same datastore.
The following describe how entities and associations are mapped to Redis documents by Hibernate OGM.

[[redis-built-in-types]]
==== Properties and built-in types

[NOTE]
====
Hibernate OGM doesn't store null values in Redis,
setting a value to null will be the same as removing the field
in the corresponding object in the db.
====

Hibernate OGM support by default the following types:

* [classname]`java.lang.String`

[source, JSON]
----
  { "text" : "Hello world!" }
----

* [classname]`java.lang.Character` (or char primitive)

[source, JSON]
----
  { "delimiter" : "/" }
----

* [classname]`java.lang.Boolean` (or boolean primitive)

[source, JSON]
----
  { "favorite" : true } # default mapping
  { "favorite" : "T" } # if @Type(type = "true_false") is given
  { "favorite" : "Y" } # if @Type(type = "yes_no") is given
  { "favorite" : 1 } # if @Type(type = "numeric_boolean") is given
----

* [classname]`java.lang.Byte` (or byte primitive)

[source, JSON]
----
  { "display_mask" : "70" }
----

* [classname]`java.lang.Short` (or short primitive)

[source, JSON]
----
  { "urlPort" : 80 }
----

* [classname]`java.lang.Integer` (or int primitive)

[source, JSON]
----
  { "stockCount" : 12309 }
----

* [classname]`java.lang.Long` (or long primitive)

[source, JSON]
----
  { "userId" : -6718902786625749549 }
----

* [classname]`java.lang.Float` (or float primitive)

[source, JSON]
----
  { "visitRatio" : 10.4 }
----

* [classname]`java.lang.Double` (or double primitive)

[source, JSON]
----
  { "tax_percentage" : 12.34 }
----

* [classname]`java.math.BigDecimal`

[source, JSON]
----
  { "site_weight" : "21.77" }
----

* [classname]`java.math.BigInteger`

[source, JSON]
----
  { "site_weight" : "444" }
----

* [classname]`java.util.Calendar`

[source, JSON]
----
  { "creation" : "2014-11-18T15:51:26.252Z" }
----

* [classname]`java.util.Date`

[source, JSON]
----
  { "last_update" : "2014-11-18T15:51:26.252Z" }
----

* [classname]`java.util.UUID`

[source, JSON]
----
  { "serialNumber" : "71f5713d-69c4-4b62-ad15-aed8ce8d10e0" }
----

* [classname]`java.util.URL`

[source, JSON]
----
  { "url" : "http://www.hibernate.org/" }
----

==== Entities

Entities are stored as JSON documents and not as BLOBs
which means each entity property will be translated into a document field.
You can use the name property of the [classname]`@Table` and [classname]`@Column` annotations
to rename the collections and the document's fields if you need to.

Redis has no built-in mechanism for detecting concurrent updates to one and the same document.


The following shows an example of an entity and its persistent representation in Redis.

.Example of an entity and its representation in Redis
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;

    @Version
    @Column(name="version")
    private int version;

    private String title;

    private String description;

    //getters, setters ...
}
----

[source, JSON]
----
{
    "version": "1",
    "title": "On the merits of NoSQL",
    "description": "This paper discuss why NoSQL will save the world for good"
}
----
====

Redis doesn't have a concept of "tables";
Instead all values are stored in a unique key.
Thus Hibernate OGM needs to add two additional attributes:

.Rename field and collection using @Table and @Column
====
[source, JAVA]
----
@Entity
@Table(name="Article")
public class News {

    @Id
    @Column(name="code")
    private String id;

    @Version
    @Column(name="revision")
    private int revision;

    private String title;

    @Column(name="desc")
    private String description;

    //getters, setters ...
}
----

[source, JSON]
----
{
    "revision": 1,
    "title": "On the merits of NoSQL",
    "desc": "This paper discuss why NoSQL will save the world for good"
}
----
====

===== Identifiers

Redis keys are derived from the Entity name and its Id separated by a colon (`:`).
String-based Id's are used directly within the key, non-string keys are encoded to JSON.
You can use any persistable Java type as identifier type, e.g. `String` or `long`.
Hibernate OGM will convert the `@Id` property into a part of the key name
so you can name the entity id like you want.

====
[source, JAVA]
----
@Entity
public class News {

    @Id
    @Column
    private long id;

    // fields, getters, setters ...
}
----

Key-Scheme for `News` entity with an Id of `42`

[source, JSON]
----
  News:42
----

[source, JAVA]
----
@Entity
@Table(name="Article")
public class News {

    @Id
    @Column(name="code")
    private String id;

    // fields, getters, setters ...
}
----

Key-Scheme for `News` entity with an Id of `breaking-news`

[source, JSON]
----
Article:breaking-news
----
====

Note that you also can work with embedded ids (via `@EmbeddedId`),
Composite Id's are mapped to a JSON object containing keys and values.
Hibernate OGM thus will create a concatenated representation of the embedded id's properties in this case.
The columns are sorted in alphabetical order to guarantee the same order.

.Entity with @EmbeddedId
====
[source, JAVA]
----
@Entity
public class News {

    @EmbeddedId
    private NewsID newsId;

    // getters, setters ...
}

@Embeddable
public class NewsID implements Serializable {

    private String title;
    private String author;

    // getters, setters ...
}
----

Resulting key:
[source, JSON]
----
News:{"newsId.author": "Guillaume, "newsId.title": "How to use Hibernate OGM ?"},
----
====

===== Identifier generation strategies

You can assign id values yourself or let Hibernate OGM generate the value using the
[classname]`@GeneratedValue` annotation.

Two main strategies are supported:

1. <<redis-table-id-generation-strategy, TABLE>>
2. <<redis-sequence-id-generation-strategy, SEQUENCE>>

Both strategy will operate in the hash named `Identifiers` containg the last value of the id, the difference
between the two strategies is the name of the field containing the values.

Hibernate OGM goes not support the `IDENTITY` strategy and an exception is thrown at startup
when it is used.
The `AUTO` strategy is the same as the <<redis-sequence-id-generation-strategy, SEQUENCE>> one.

The next value is obtained using Redis' http://redis.io/commands/hincrby[HINCRBY] command
that guarantees to create atomic updates to the underlying data structure.

[[redis-table-id-generation-strategy]]
*1) TABLE generation strategy*

.Id generation strategy TABLE using default values

====
[source, JAVA]
----
@Entity
public class Video {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE)
    private Integer id;
    private String name

    // getters, setters, ...
}
----

[source, JSON]
----
Key: Video:1
{
   "name": "Scream",
   "director": "Wes Craven"
}
----

[source, JSON]
----
Key: Identifiers, Field sequence_name:default
Value: 1
----
====

.Id generation strategy TABLE using a custom table
====
[source, JAVA]
----
@Entity
public class Video {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE, generator = "video")
    @TableGenerator(
            name = "video",
            table = "sequences",
            pkColumnName = "key",
            pkColumnValue = "video",
            valueColumnName = "seed"
    )
    private Integer id;

    private String name;

    // getter, setters, ...
}
----

[source, JSON]
----
@Entity
public class Video {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE, generator = "video")
    @TableGenerator(
            name = "video",
            table = "sequences",
            pkColumnName = "key",
            pkColumnValue = "video",
            valueColumnName = "seed"
    )
    private Integer id;
    private String name

    // getters, setters, ...
}
----

[source, JSON]
----
Key: Identifiers, Field sequences:video
Value: 2
----
====

[[redis-sequence-id-generation-strategy]]
*2) SEQUENCE generation strategy*

.SEQUENCE id generation strategy using default values
====
[source, JAVA]
----
@Entity
public class Song {

  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE)
  private Long id;

  private String title;

  // getters, setters ...
}
----

[source, JSON]
----
Key: Song:2
{
   "title": "Ave Maria",
   "singer": "Charlotte Church"
}
----

[source, JSON]
----
Key: Identifiers, Field hibernate_sequences:hibernate_sequence
Value: 3
----
====

.SEQUENCE id generation strategy using custom values
====
[source, JAVA]
----
@Entity
public class Song {

  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "songSequenceGenerator")
  @SequenceGenerator(
      name = "songSequenceGenerator",
      sequenceName = "song_sequence",
      initialValue = 2,
      allocationSize = 20
  )
  private Long id;

  private String title;

  // getters, setters ...
}
----

[source, JSON]
----
Key: Song:2
{
   "title": "Ave Maria",
   "singer": "Charlotte Church"
}
----

[source, JSON]
----
Key: Identifiers, Field hibernate_sequences:song_sequence
Value: 20
----
====

===== Embedded objects and collections

Hibernate OGM stores elements annotated with [classname]`@Embedded`
or [classname]`@ElementCollection` as nested documents of the owning entity.

.Embedded object
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;
    private String title;

    @Embedded
    private NewsPaper paper;

    // getters, setters ...
}

@Embeddable
public class NewsPaper {

    private String name;
    private String owner;

    // getters, setters ...
}
----

[source, JSON]
----
Key: News:939c892d-1129-4aff-abf8-e6c26e59dcb
{
    "paper": {
        "name": "NoSQL journal of prophecies",
        "owner": "Delphy"
    }
}
----
====

.@ElementCollection with primitive types
====
[source, JAVA]
----
@Entity
public class AccountWithPhone {

    @Id
    private String id;

    @ElementCollection
    private List<String> mobileNumbers;

    // getters, setters ...
}
----

AccountWithPhone collection

[source, JSON]
----
Key: AccountWithPhone:2
{
   "mobileNumbers": [
       "+1-222-555-0222",
       "+1-202-555-0333"
   ]
}
----
====

.@ElementCollection with one attribute
====
[source, JAVA]
----
@Entity
public class GrandMother {

    @Id
    private String id;

    @ElementCollection
    private List<GrandChild> grandChildren = new ArrayList<GrandChild>();

    // getters, setters ...
}

@Embeddable
public class GrandChild {

    private String name;

    // getters, setters ...
}
----

[source, JSON]
----
Key: GrandMother:86ada718-f2a2-4299-b6ac-3d90b1ef2331
{
    "grandChildren" : [ "Luke", "Leia" ]
}
----
====

The class [classname]`GrandChild` has only one attribute `name`,
this means that Hibernate OGM doesn't need to store the name of the attribute.

If the nested document has two or more fields, like in the following example,
Hibernate OGM will store the name of the fields as well.

.@ElementCollection with @OrderColumn
====
[source, JAVA]
----
@Entity
public class GrandMother {

    @Id
    private String id;

    @ElementCollection
    @OrderColumn( name = "birth_order" )
    private List<GrandChild> grandChildren = new ArrayList<GrandChild>();

    // getters, setters ...
}

@Embeddable
public class GrandChild {

    private String name;

    // getters, setters ...
}
----

[source, JSON]
----
Key: GrandMother:86ada718-f2a2-4299-b6ac-3d90b1ef2331
{
    "grandChildren" : [
            {
                "name" : "luke",
                "birth_order" : 0
            },
            {
                "name" : "leia",
                "birthorder" : 1
            }
    ]
}
----
====

==== Associations

Hibernate OGM Redis provides two strategies to store navigation information for associations:

* `IN_ENTITY` (default)
* `ASSOCIATION_DOCUMENT`

You can switch between the two strategies using:

* the `@AssociationStorage` annotation (see <<ogm-redis-annotation-configuration>>)
* specifying a gloabl default strategy via the `hibernate.ogm.datastore.document.association_storage` configuration property

===== In Entity strategy

With this strategy, Hibernate OGM directly stores the id(s)
of the other side of the association
into a field or an embedded document
depending if the mapping concerns a single object or a collection.
The field that stores the relationship information is named like the entity property.

[NOTE]
====
When using this strategy the annotations `@JoinTable` will be ignored because no collection is created
for associations.

You can use `@JoinColumn` to change the name of the field that stores the foreign key (as an example, see
<<redis-in-entity-one-to-one-join-column>>).
====

.Java entity
====
[source, JAVA]
----
@Entity
public class AccountOwner {

    @Id
    private String id;

    @ManyToMany
    public Set<BankAccount> bankAccounts;

    // getters, setters, ...
----
====

.JSON representation
====
[source, JSON]
----
Key: AccountOwner:owner0001
{
    "bankAccounts" : [
        "accountABC",
        "accountXYZ"
    ]
}
----
====

.Unidirectional one-to-one
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}


@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    private Vehicule vehicule;

    // getters, setters ...
}
----

[source, JSON]
----
Key: Vehicule:V001
{
    "id": "V001",
    "brand": "Mercedes",
}
----

[source, JSON]
----
Key: Wheel:W1
{
  "diameter" : 0,
  "vehicule_id" : "V001"
}
----
====

[[redis-in-entity-one-to-one-join-column]]
.Unidirectional one-to-one with @JoinColumn
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}


@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    @JoinColumn( name = "part_of" )
    private Vehicule vehicule;

    // getters, setters ...
}
----

[source, JSON]
----
Key: Vehicule:V001
{
    "brand": "Mercedes",
}
----

[source, JSON]
----
Key: Wheel:W1
{
  "diameter" : 0,
  "part_of" : "V001"
}
----
====

In a true one-to-one association, it is possible to share the same id between the two entities
and therefore a foreign key is not required. You can see how to map this type of association in
the following example:

.Unidirectional one-to-one with @MapsId and @PrimaryKeyJoinColumn
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}

@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    @PrimaryKeyJoinColumn
    @MapsId
    private Vehicule vehicule;

    // getters, setters ...
}
----

[source, JSON]
----
Key: Vehicule:V001
{
    "id": "V001",
    "brand": "Mercedes",
}
----

[source, JSON]
----
Wheel:vehicule:V001
{
  "diameter" : 0,
  "vehicule_id" : "V001"
}
----
====

.Bidirectional one-to-one
====
[source, JAVA]
----
@Entity
public class Husband {

    @Id
    private String id;
    private String name;

    @OneToOne
    private Wife wife;

    // getters, setters ...
}

@Entity
public class Wife {

    @Id
    private String id;
    private String name;

    @OneToOne
    private Husband husband;

    // getters, setters ...
}
----

[source, JSON]
----
Key: Husband:alex
{
  "id" : "alex",
  "name" : "Alex",
  "wife" : "bea"
}
----

[source, JSON]
----
Key: Wife:bea
{
  "name" : "Bea",
  "husband" : "alex"
}
----
====

.Unidirectional one-to-many
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

Basket collection

[source, JSON]
----
Key: Basket:davide_basket
{
  "owner" : "Davide",
  "products" : [ "Beer", "Pretzel" ]
}
----

Product collection
[source, JSON]
----
Key: Product:Beer
{
  "name" : "Beer",
  "description" : "Tactical nuclear penguin"
}

Key: Product:Pretzel
{
  "name" : "Pretzel",
  "description" : "Glutino Pretzel Sticks"
}
----
====

.Unidirectional one-to-many using one collection per strategy with @OrderColumn
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

Basket collection

[source, JSON]
----
Key: Basket:davide_basket
{
  "owner" : "Davide"
}
----

Product collection
[source, JSON]
----
Key: Product:Pretzel
{
  "description" : "Glutino Pretzel Sticks"
}
Key: Product:Beer
{
  "description" : "Tactical nuclear penguin"
}
----

Redis List Associations:Basket_Product:davide_basket
[source, JSON]
----
Rows:
[
{
  "products_name" : "Pretzel",
  "products_ORDER" : 1
},
{
  "products_name" : "Beer",
  "products_ORDER" : 0
}
]
----
====

A map can be used to represents an association,
in this case Hibernate OGM will store the key of the map
and the associated id.

.Unidirectional one-to-many using maps with defaults
====
[source, JAVA]
----
@Entity
public class User {

    @Id
    private String id;

    @OneToMany
    private Map<String, Address> addresses = new HashMap<String, Address>();

    // getters, setters ...
}

@Entity
public class Address {

    @Id
    private String id;
    private String city;

    // getters, setters ...
}
----

[source, JSON]
----
Key: User:user_001
{ 
  "addresses" : [
    { 
      "addresses_KEY" : "work",
      "addresses_id" : "address_001"
    },
    {
      "addresses_KEY" : "home",
      "addresses_id" : "address_002"
    }
  ]
}
----

[source, JSON]
----
Key: Address:address_001
{
  "city" : "Rome"
}
----

[source, JSON]
----
Key: Address:address_002
{
  "city" : "Paris"
} 
----
====

You can use @MapKeyColumn to rename the column containing the key of the map.

.Unidirectional one-to-many using maps with @MapKeyColumn
====
[source, JAVA]
----
@Entity
public class User {

    @Id
    private String id;

    @OneToMany
    @MapKeyColumn(name = "addressType")
    private Map<String, Address> addresses = new HashMap<String, Address>();

    // getters, setters ...
}

@Entity
public class Address {

    @Id
    private String id;
    private String city;

    // getters, setters ...
}
----

[source, JSON]
----
Key: User:user_001
{ 
  "addresses" : [
    { 
      "addressType" : "work",
      "addresses_id" : "address_001"
    },
    {
      "addressType" : "home",
      "addresses_id" : "address_002"
    }
  ]
}
----

[source, JSON]
----
Key: Address:address_001
{
  "city" : "Rome"
}
----

[source, JSON]
----
Key: Address:address_002
{
  "city" : "Paris"
} 
----
====

.Unidirectional many-to-one
====
[source, JAVA]
----
@Entity
public class JavaUserGroup {

    @Id
    private String jugId;
    private String name;

    // getters, setters ...
}

@Entity
public class Member {

    @Id
    private String id;
    private String name;

    @ManyToOne
    private JavaUserGroup memberOf;

    // getters, setters ...
}
----

[source, JSON]
----
Key: JavaUserGroups:summer_camp
{
  "name" : "JUG Summer Camp"
}
----

[source, JSON]
----
Key: Member:jerome
{
  "name" : "Jerome"
  "memberOf_jugId" : "summer_camp"
}
----

[source, JSON]
----
Key: Member:emmanuel
{
  "name" : "Emmanuel Bernard"
  "memberOf_jugId" : "summer_camp"
}
----
====

.Bidirectional many-to-one 
====
[source, JAVA]
----
@Entity
public class SalesForce {

    @Id
    private String id;
    private String corporation;

    @OneToMany(mappedBy = "salesForce")
    private Set<SalesGuy> salesGuys = new HashSet<SalesGuy>();

    // getters, setters ...
}

@Entity
public class SalesGuy {

    private String id;
    private String name;

    @ManyToOne
    private SalesForce salesForce;

    // getters, setters ...
}
----

[source, JSON]
----
Key: SalesForce:red_hat
{
  "corporation": "Red Hat",
  "salesGuys": [ "eric", "simon" ]
}
----

[source, JSON]
----
Key: SalesGuy:eric
{
  "name": "Eric"
  "salesForce_id": "red_hat",
}
----

[source, JSON]
----
Key: SalesGuy:simon
{
  "name": "Simon",
  "salesForce_id": "red_hat"
}
----
====

.Unidirectional many-to-many using in entity strategy
====
[source, JAVA]
----
@Entity
public class Student {

    @Id
    private String id;
    private String name;

    // getters, setters ...
}

@Entity
public class ClassRoom {

    @Id
    private Long id;
    private String lesson;

    @ManyToMany
    private List<Student> students = new ArrayList<Student>();

    // getters, setters ...
}
----

[source, JSON]
----
Key: ClassRoom:1
{
   "students": [
       "mario",
       "john"
   ],
   "name": "Math"
}
----

[source, JSON]
----
Key: ClassRoom:2
{
   "students": [
       "kate",
       "mario"
   ],
   "name": "English"
}
----

[source, JSON]
----
Key: Student:john
{
   "name": "John Doe"
}
----

[source, JSON]
----
Key: Student:kate
{
   "name": "Kate Doe"
}
----

[source, JSON]
----
Key: Student:mario
{
   "name": "Mario Rossi"
}
----
====

.Bidirectional many-to-many 
====
[source, JAVA]
----
@Entity
public class AccountOwner {

    @Id
    private String id;

    private String SSN;

    @ManyToMany
    private Set<BankAccount> bankAccounts;

    // getters, setters ...
}

@Entity
public class BankAccount {

    @Id
    private String id;

    private String accountNumber;

    @ManyToMany( mappedBy = "bankAccounts" )
    private Set<AccountOwner> owners = new HashSet<AccountOwner>();

    // getters, setters ...
}
----

[source, JSON]
----
Key: AccountOwner:owner_1
{
   "SSN": "0123456",
   "bankAccounts": [
       "account_1",
       "account_2"
   ]
}
----

[source, JSON]
----
Key: BankAccount:account_1
{
   "accountNumber": "X2345000",
   "owners": [
       "owner_1"
   ]
}
----

[source, JSON]
----
Key: BankAccount:account_2
{
   "accountNumber": "ZZZ-009",
   "owners": [
       "owner_1"
   ]
}
----
====

[[redis-association-document-strategy]]
===== Association document strategy

With this strategy, Hibernate OGM uses separate association lists
to store all navigation information.
Each assocation list has 2 parts.
The first is the key which contains the identifier information
of the association owner and the name of the association table.
The second part is the `rows` field which stores (into an embedded collection) all ids
that the current instance is related to.

.Unidirectional relationship
====
[source, JSON]
----
Key: Associations:AccountOwner:BankAccount:4f5b48ad-f074-4a64-8cf4-1f9c54a33f76
[
    "7873a2a7-c77c-447c-b000-890f0a4dfa9a"
]
----
====

For a bidirectional relationship, another list is created where ids are reversed.
Don't worry, Hibernate OGM takes care of keeping them in sync:

.Bidirectional relationship
====
[source, JSON]
----
Key: Associations:AccountOwner:BankAccount:4f5b48ad-f074-4a64-8cf4-1f9c54a33f76
[
    "7873a2a7-c77c-447c-b000-890f0a4dfa9a"
]

Key: Associations:AccountOwner:bankAccounts:7873a2a7-c77c-447c-b000-890f0a4dfa9a
[
    "4f5b48ad-f074-4a64-8cf4-1f9c54a33f76"
]
----
====

[NOTE]
====
This strategy won't affect *-to-one associations or embedded collections.
====

.Unidirectional one-to-many using document strategy
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

[source, JSON]
----
Key: Basket:davide_basket
{
   "owner": "Davide"
}
----

[source, JSON]
----
Key: Basket:davide_basket
{
   "owner": "Davide"
}
----

[source, JSON]
----
Key: Product:Pretzel
{
   "description": "Glutino Pretzel Sticks",
}
----

[source, JSON]
----
Key: Associations:Basket:Product:davide_basket
[
   "Beer",
   "Pretzel"
]
----
====

Using the annotation `@JoinTable` it is possible to change the value of
the document containing the association.

.Unidirectional one-to-many using document strategy with `@JoinTable`
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    @JoinTable( name = "BasketContent" )
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

[source, JSON]
----
Key: Basket:davide_basket
{
   "owner": "Davide"
}
----

[source, JSON]
----
Key: Basket:davide_basket
{
   "owner": "Davide"
}
----

[source, JSON]
----
Key: Product:Pretzel
{
   "description": "Glutino Pretzel Sticks",
}
----

[source, JSON]
----
Key: Association:BasketContent:Basket:davide_basket
[
   "Beer",
   "Pretzel"
]
----
====

.Unidirectional many-to-many using document strategy
====
[source, JAVA]
----
@Entity
public class Student {

    @Id
    private String id;
    private String name;

    // getters, setters ...
}

@Entity
public class ClassRoom {

    @Id
    private Long id;
    private String lesson;

    @ManyToMany
    private List<Student> students = new ArrayList<Student>();

    // getters, setters ...
}
----

[source, JSON]
----
Key: ClassRoom:1
{
   "name": "Math"
}
----

[source, JSON]
----
Key: ClassRoom:2
{
   "name": "English"
}
----

[source, JSON]
----
Key: ClassStudent:john
{
   "name": "John Doe"
}
----

[source, JSON]
----
Key: ClassStudent:kate
{
   "name": "Kate Doe"
}
----

[source, JSON]
----
Key: ClassStudent:mario
{
   "name": "Mario Rossi"
}
----

[source, JSON]
----
Key: Association:ClassRoom:Student:ClassRoom:1
[
   "mario",
   "john"
]
----

[source, JSON]
----
Key: Association:ClassRoom:Student:ClassRoom:2
[
   "kate"
]
----
====

.Bidirectional many-to-many using document strategy
====
[source, JAVA]
----
@Entity
public class AccountOwner {

    @Id
    private String id;

    private String SSN;

    @ManyToMany
    private Set<BankAccount> bankAccounts;

    // getters, setters ...
}

@Entity
public class BankAccount {

    @Id
    private String id;

    private String accountNumber;

    @ManyToMany(mappedBy = "bankAccounts")
    private Set<AccountOwner> owners = new HashSet<AccountOwner>();

    // getters, setters ...
}
----

[source, JSON]
----
Key: AccountOwner:owner_1
{
   "SSN": "0123456",
}
----

[source, JSON]
----
Key: BankAccount:account_1
{
   "accountNumber": "X2345000",
}
----

[source, JSON]
----
Key: BankAccount:account_2
{
   "accountNumber": "ZZZ-009",
}
----

[source, JSON]
----
Key: Association:AccountOwner:BankAccount:account_1
[
   "owner_1"
]

----

[source, JSON]
----
Key: Association:AccountOwner:BankAccount:bankAccounts:account_2
[
   "owner_1"
]
----

[source, JSON]
----
Key: Association:AccountOwner:BankAccount:owners:account_1
[
   "account_1",
   "account_2"
]
----
====

=== Transactions

The Redis dialect does not support transactions for now.
Only changes applied to the same document are done atomically.
A change applied to more than one document will not be applied atomically.
This problem is slightly mitigated by the fact that Hibernate OGM queues all changes
before applying them during flush time.
So the window of time used to write to Redis is smaller than what you would have done manually.

We recommend that you still use transaction demarcations with Hibernate OGM
to trigger the flush operation transparently (on commit).
But do not consider rollback as a possibility, this won't work.

=== Queries

Hibernate OGM is a work in progress
and we are actively working on JP-QL query support.

In the mean time, you have two strategies to query entities stored by Hibernate OGM:

* use Hibernate Search

