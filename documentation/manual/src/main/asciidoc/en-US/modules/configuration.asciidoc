[[ogm-configuration]]

== Configure and start Hibernate OGM

Hibernate OGM favors ease of use and convention over configuration.
This makes its configuration quite simple by default.

=== Bootstrapping Hibernate OGM

Hibernate OGM can be used via the Hibernate native APIs ([classname]`Session`)
or via the JPA APIs ([classname]`EntityManager`).
Depending of your choice, the bootstrapping strategy is slightly different.

==== Using JPA

The good news is that if you use JPA as your primary API,
the configuration is extremely simple.
Hibernate OGM is seen as a persistence provider
which you need to configure in your [filename]`persistence.xml`.
That's it!
The provider name is [classname]`org.hibernate.ogm.jpa.HibernateOgmPersistence`.

.persistence.xml file
====
[source, XML]
----
<?xml version="1.0"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">

    <persistence-unit name="org.hibernate.ogm.tutorial.jpa" transaction-type="JTA">
        <!-- Use Hibernate OGM provider: configuration will be transparent -->
        <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>
        <properties>
            <property name="hibernate.transaction.jta.platform"
                      value="JBossTS" />
            <property name="hibernate.ogm.datastore.provider"
                      value="infinispan" />
        </properties>
    </persistence-unit>
</persistence>
----
====

There are a couple of things to notice:

* there is no JDBC dialect setting
* there is no JDBC setting except sometimes a `jta-data-source`
  (check <<ogm-configuration-environments-javaee>> for more info)
* there is no DDL scheme generation options (`hbm2ddl`)
  as NoSQL generally do not require schemas
* if you use JTA (which we recommend), you will need to set the JTA platform


You also need to configure which NoSQL datastore you want to use
and how to connect to it.
We will detail how to do that later in <<ogm-datastore-providers>>.
In this case, we have used the defaults settings for Infinispan.

From there, simply bootstrap JPA the way you are used to with Hibernate ORM:

* via [classname]`Persistence.createEntityManagerFactory`
* by injecting the [classname]`EntityManager` / [classname]`EntityManagerFactory` in a Java EE container
* by using your favorite injection framework (CDI - Weld, Spring, Guice)


==== Using Hibernate ORM native APIs

If you want to bootstrap Hibernate OGM using the native Hibernate APIs,
use the new bootstrap API from Hibernate ORM 5.
By setting `OgmProperties.ENABLED` to true, Hibernate OGM instead of ORM will be bootstrapped.
Note that unwrapping into `OgmSessionFactoryBuilder` is not strictly needed,
but it will allow you to set Hibernate OGM specific options in the future and also gives you a reference
to `OgmSessionFactory` instead of `SessionFactory`.

.Bootstrap Hibernate OGM with Hibernate ORM native APIs
====
[source, JAVA]
----
StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
    .applySetting( OgmProperties.ENABLED, true )
    //assuming you are using JTA in a non container environment
    .applySetting( AvailableSettings.TRANSACTION_COORDINATOR_STRATEGY, "jta" )
    //assuming JBoss TransactionManager in standalone mode
    .applySetting( AvailableSettings.JTA_PLATFORM, "JBossTS" )
    //assuming Infinispan as the backend, using the default settings
    .applySetting( OgmProperties.DATASTORE_PROVIDER, Infinispan.DATASTORE_PROVIDER_NAME );
    .build();

//build the SessionFactory
OgmSessionFactory sessionFactory = new MetadataSources( registry )
    .addAnnotatedClass( Order.class )
    .addAnnotatedClass( Item.class )
    .buildMetadata()
    .getSessionFactoryBuilder()
    .unwrap( OgmSessionFactoryBuilder.class )
    .build();
----
====

There are a couple of things to notice:

* there is no DDL schema generation options (`hbm2ddl`)
  as Infinispan does not require schemas
* you need to set the right transaction strategy
  and the right transaction manager lookup strategy
  if you use a JTA based transaction strategy
  (see <<ogm-configuration-environments>>)


You also need to configure which NoSQL datastore you want to use
and how to connect to it.
We will detail how to do that later in <<ogm-datastore-providers>>.
In this case, we have used the defaults settings for Infinispan.

[[ogm-configuration-environments]]

=== Environments

Hibernate OGM runs in various environments,
pretty much what you are used to with Hibernate ORM.
There are however environments where it works better
and has been more thoroughly tested.

[[ogm-configuration-environments-javaee]]

==== In a Java EE container

You don't have to do much in this case. You need three specific settings:

* the transaction coordinator type
* the JTA platform
* a JTA datasource


If you use JPA, simply set the `transaction-type` to `JTA`
and the transaction factory will be set for you.

If you use Hibernate ORM native APIs only,
then set `hibernate.transaction.coordinator_class` to "jta".

Set the JTA platform to the right Java EE container.
The property is `hibernate.transaction.jta.platform`
and must contain the fully qualified class name of the lookup implementation.
The list of available values are listed in
http://docs.jboss.org/hibernate/orm/5.0/userguide/html_single/Hibernate_User_Guide.html#transactions-physical-jtaplatform[Hibernate ORM's configuration section].
For example, in WildFly, use `JBossAS`.

In your [filename]`persistence.xml`, you also need to define an existing datasource.
It is not needed by Hibernate OGM
and won't be used but the JPA specification mandates this setting.

.persistence.xml file
====
[source, XML]
----
<?xml version="1.0"?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
             version="2.0">

    <persistence-unit name="org.hibernate.ogm.tutorial.jpa" transaction-type="JTA">
        <!-- Use Hibernate OGM provider: configuration will be transparent -->
        <provider>org.hibernate.ogm.jpa.HibernateOgmPersistence</provider>
        <jta-data-source>java:/DefaultDS</jta-data-source>
        <properties>
            <property name="hibernate.transaction.jta.platform" value="JBossAS" />
            <property name="hibernate.ogm.datastore.provider" value="infinispan" />
        </properties>
    </persistence-unit>
</persistence>
----
====

`java:DefaultDS` will work for out of the box WildFly deployments.

[[ogm-configuration-environments-standalonejta]]

==== In a standalone JTA environment

There is a set of common misconceptions in the Java community about JTA:

* JTA is hard to use
* JTA is only needed when you need transactions spanning several databases
* JTA works in Java EE only
* JTA is slower than "simple" transactions


None of that is true of course,
let me show you how to use JBoss Transaction
in a standalone environment with Hibernate OGM.

In Hibernate OGM, make sure to set the following properties:

* `transaction-type` to `JTA` in your persistence.xml if you use JPA
* or `hibernate.transaction.coordinator_class` to "jta"
  if you use [classname]`StandardServiceRegistryBuilder`/[classname]`OgmConfiguration` to bootstrap Hibernate OGM.
* `hibernate.transaction.jta.platform` to `JBossTS` in both cases.


On the JBoss Transaction side, add JBoss Transaction in your classpath.
If you use maven, it should look like this:

.JBoss Transaction dependency declaration
====
[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
    <groupId>org.jboss.narayana.jta</groupId>
    <artifactId>narayana-jta</artifactId>
    <version>{jboss-jta-version}</version>
</dependency>
----
====

The next step is you get access to the transaction manager.
The easiest solution is to do as the following example:

[source, JAVA]
----
TransactionManager transactionManager =
   com.arjuna.ats.jta.TransactionManager.transactionmanager();
----

Then use the standard JTA APIs to demarcate your transaction and you are done!

.Demarcate your transaction with standalone JTA
====
[source, JAVA]
----
//note that you must start the transaction before creating the EntityManager
//or else call entityManager.joinTransaction()
transactionManager.begin();

final EntityManager em = emf.createEntityManager();

Poem poem = new Poem();
poem.setName("L'albatros");
em.persist(poem);

transactionManager.commit();

em.clear();

transactionManager.begin();

poem = em.find(Poem.class, poem.getId());
assertThat(poem).isNotNull();
assertThat(poem.getName()).isEqualTo("L'albatros");
em.remove(poem );

transactionManager.commit();

em.close();
----
====

That was not too hard, was it?
Note that application frameworks like Seam
or Spring Framework should be able to initialize the transaction manager
and call it to demarcate transactions for you.
Check their respective documentation.

==== Without JTA

While this approach works today, it does not ensure that works are done transactionally
and hence won't be able to rollback your work.
This will change in the future but in the mean time,
such an environment is not recommended.

[NOTE]
====
For NoSQL datastores not supporting transactions, this is less of a concern.
====

[[ogm-configuration-optionsogm-configuration-options]]

=== Configuration options

The most important options when configuring Hibernate OGM are related to the datastore.
They are explained in <<ogm-datastore-providers>>.

Otherwise, most options from Hibernate ORM and Hibernate Search are applicable
when using Hibernate OGM.
You can pass them as you are used to do
either in your [filename]`persistence.xml` file, your [filename]`hibernate.cfg.xml` file
or programmatically.

More interesting is a list of options that do _not_ apply to Hibernate OGM
and that should not be set:

* `hibernate.dialect`
* `hibernate.connection.*` and in particular `hibernate.connection.provider_class`
* `hibernate.show_sql` and `hibernate.format_sql`
* `hibernate.default_schema` and `hibernate.default_catalog`
* `hibernate.use_sql_comments`
* `hibernate.jdbc.*`
* `hibernate.hbm2ddl.auto` and `hibernate.hbm2ddl.import_file`

=== Configuring Hibernate Search

Hibernate Search integrates with Hibernate OGM just like it does with Hibernate ORM.
The Hibernate Search version tested is {hibernate-search-version}.
Add the dependency to your project - the group id is `org.hibernate` and artifact id `hibernate-search-orm`.

Then configure where you want to store your indexes,
map your entities with the relevant index annotations and you are good to go.
For more information, simply check the
http://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/[Hibernate Search reference documentation].

In <<ogm-infinispan-indexstorage>> we'll discuss how to store your Lucene indexes in Infinispan.
This is useful even if you don't plan to use Infinispan as your primary data store.

[[ogm-configuration-jbossmodule]]

=== How to package Hibernate OGM applications for WildFly 10

Provided you're deploying on WildFly,
there is an additional way to add the OGM dependencies to your application.

In WildFly, class loading is based on modules; this system defines explicit, non-transitive dependencies on other modules.

Modules allow to share the same artifacts across multiple applications,
making deployments smaller and quicker, and also making it possible to deploy multiple different versions of any library.

More details about modules are described in
https://docs.jboss.org/author/display/WFLY10/Class+Loading+in+WildFly[Class Loading in WildFly].

When deploying a JPA application on WildFly, you should be aware that there are some additional useful configuration properties defined by the WildFly JPA subsystem.
These are documented in https://docs.jboss.org/author/display/WFLY10/JPA+Reference+Guide[WildFly JPA Reference Guide].

If you apply the following instructions you can create small and efficient deployments which do not include any dependency,
as you can include your favourite version of Hibernate OGM directly to the collection of container provided libraries.

==== Packaging Hibernate OGM applications for WildFly 10

You can download the pre-packaged module ZIP for this version of Hibernate OGM from:

* https://downloads.sourceforge.net/project/hibernate/hibernate-ogm/{hibernate-ogm-version}/hibernate-ogm-modules-wildfly10-{hibernate-ogm-version}.zip[Sourceforge]
* https://repo1.maven.org/maven2/org/hibernate/ogm/hibernate-ogm-modules-wildfly10/{hibernate-ogm-version}/hibernate-ogm-modules-wildfly10-{hibernate-ogm-version}.zip[The Maven Central repository]

Unpack the archive into the `modules` folder of your WildFly 10 installation.
The modules included are:

* _org.hibernate.ogm_, the core Hibernate OGM library.
* _org.hibernate.ogm.<%DATASTORE%>_, one module for each datastore, with _<%DATASTORE%>_ being one of _infinispan_, _mongodb_ etc.
* Several shared dependencies such as _org.hibernate.hql:<%VERSION%>_ (containing the query parser) and others

The module slot to use for Hibernate OGM {hibernate-ogm-version} is `{hibernate-ogm-module-slot}` as the format of the slot name does not include the "micro" part of the project version.

There are two ways to include the dependencies in your project:

Using the manifest::
Add this entry to the MANIFEST.MF in your archive (replace _<%DATASTORE%>_ with the right value for your chosen datastore):

[source]
[subs="verbatim,attributes"]
----
Dependencies: org.hibernate.ogm:{hibernate-ogm-module-slot} services, org.hibernate.ogm.<%DATASTORE%>:{hibernate-ogm-module-slot} services
----

Using jboss-deployment-structure.xml::
This is a JBoss-specific descriptor.
Add a `WEB-INF/jboss-deployment-structure.xml` in your archive with the following content (replace _<%DATASTORE%>_ with the right value for your chosen datastore):

[source, XML]
[subs="verbatim,attributes"]
----
<jboss-deployment-structure>
    <deployment>
        <dependencies>
            <module name="org.hibernate.ogm" slot="{hibernate-ogm-module-slot}" services="export" />
            <module name="org.hibernate.ogm.<%DATASTORE%>" slot="{hibernate-ogm-module-slot}" services="export" />
        </dependencies>
    </deployment>
</jboss-deployment-structure>
----

More information about the descriptor can be found in the
https://docs.jboss.org/author/display/WFLY10/Class+Loading+in+WildFly[WildFly documentation].

==== Configure your persistence.xml to use your choice of persistence provider

WildFly will by default attempt to guess which Persistence Provider you need by having a look at the `provider` section of the `persistence.xml`.

While this works fine in most cases, unfortunately WildFly 10 in the case of Hibernate OGM will attempt to inject an outdated module identifier so you have to disable this.

Set the following property in your `persistence.xml` to make sure you will be using the Persistence Provider which you already provided as a module,
as described in the previous section.

[source]
----
<property name="jboss.as.jpa.providerModule" value="application" />
----


==== Enabling both the Hibernate Search and Hibernate OGM modules

A compatible Hibernate Search module is included in WildFly 10, and Hibernate Search is activated automatically if you're indexing any entity.

When using WildFly several of the technologies it includes are automatically enabled.
For example Hibernate ORM is made available to your applications if your `persistence.xml` defines a persistence unit using Hibernate as persistence provider
(or is not specifying any provider, as Hibernate is the default one).

Similarly, Hibernate Search is automatically activated and made available on the user's application classpath if and when the application server detects the need for it.
This is the default behaviour, but you are in control and can override this all; see the https://docs.jboss.org/author/display/WFLY10/JPA+Reference+Guide[WildFly JPA Reference Guide]
for a full list of properties you can explicitly set.
Among these you fill find properties to control and override which modules are activated.

Hibernate OGM however is currently not included in WildFly, so you have to enable it explicitly.

Optionally you could download a different version of the Hibernate Search modules, provided it is compatible with the Hibernate OGM version you plan to use.
For example you might want to download a more recent micro version of what is included in WildFly 10 at the time of publishing this documentation.

The Hibernate Search documentation explains the details of downloading and deploying a custom version: http://docs.jboss.org/hibernate/search/{hibernate-search-major-minor-version}/reference/en-US/html/search-configuration.html#_update_and_activate_latest_hibernate_search_version_in_wildfly[Update and activate latest Hibernate Search version in WildFly].

This approach might require you to make changes to the XML definitions of the Hibernate OGM modules to change the references to the Hibernate Search slot
to the slot version that you plan to use.

==== Using the Hibernate OGM modules with Infinispan

The Infinispan project also provides custom modules for WildFly 10.
Hibernate OGM modules require these modules if you're planning to use the Hibernate OGM / Infinispan combination on WildFly.

This release of Hibernate OGM was tested exclusively with Infinispan version {infinispan-version};
the Infinispan project generally attempts to maintain the same API and integration points within the same major.minor version,
so a micro version update should be safe but is untested.

In case you want to experiment with a more significant version upgrade, you will need to edit the modules of Hibernate OGM:
the module identifiers are hardcoded in the XML files representing the module.

Download the Infinispan modules pack for WildFly 10 from here:

 * https://repo1.maven.org/maven2/org/infinispan/infinispan-as-embedded-modules/{infinispan-version}/infinispan-as-embedded-modules-{infinispan-version}.zip[Infinispan WildFly modules version {infinispan-version} from the Maven repository]

Then similarly to what you did with the Hibernate OGM modules zip, unpack this one too in your `modules` directory within the application server.

