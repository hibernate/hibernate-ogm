[[ogm-datastore-providers]]

== NoSQL datastores

Currently Hibernate OGM supports the following NoSQL datastores:

* Map: stores data in an in-memory Java map to store data.
  Use it only for unit tests.
* Infinispan: stores data into http://infinispan.org/[Infinispan] (data grid)
* Ehcache: stores data into http://ehcache.org/[Ehcache] (cache)
* MongoDB: stores data into http://www.mongodb.org/[MongoDB] (document store)
* Neo4j: stores data into http://www.neo4j.org/[Neo4j] (graph database)
* CouchDB: stores data into https://couchdb.apache.org/[CouchDB] (document store)
  - at this stage, this datastore is experimental
* Redis: stores data into http://redis.io/[Redis] (key-value store)
  - at this stage, this datastore is experimental

More are planned, if you are interested,
come talk to us (see <<ogm-howtocontribute>>).

For each datastore, Hibernate OGM has specific integration code called a datastore provider.
All are in a dedicated maven module, you simply need to depend on the one you use.

Hibernate OGM interacts with NoSQL datastores via two contracts:

* a `DatastoreProvider` which is responsible for
  starting and stopping the connection(s) with the datastore
  and prop up the datastore if needed
* a `GridDialect` which is responsible for
  converting an Hibernate OGM operation into a datastore specific operation

=== Using a specific NoSQL datastore

Only a few steps are necessary:

* add the datastore provider module to your classpath
* ask Hibernate OGM to use that datastore provider
* configure the URL or configuration to reach the datastore

Adding the relevant Hibernate OGM module in your classpath looks like this in Maven:

[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
    <groupId>org.hibernate.ogm</groupId>
    <artifactId>hibernate-ogm-infinispan</artifactId>
    <version>{hibernate-ogm-version}</version>
</dependency>
----

The module names are
`hibernate-ogm-infinispan`, `hibernate-ogm-ehcache`, `hibernate-ogm-mongodb`, `hibernate-ogm-neo4j`, `hibernate-ogm-couchdb`, `hibernate-ogm-redis` and `hibernate-ogm-cassandra`.
The map datastore is included in the Hibernate OGM engine module.

Next, configure which datastore provider you want to use.
This is done via the `hibernate.ogm.datastore.provider` option.
Possible values are:

* specific shortcuts (preferable): `map` (only to be used for unit tests),
  `infinispan`, `ehcache`, `mongodb`, `neo4j_embedded`, `couchdb_experimental` or `redis_experimental`
* the fully qualified class name of a [classname]`DatastoreProvider` implementation

[NOTE]
====
When bootstrapping a session factory or entity manager factory programmatically,
you should use the constants declared on `org.hibernate.ogm.cfg.OgmProperties` to specify configuration properties
such as `hibernate.ogm.datastore.provider`.

In this case you also can specify the provider in form of a class object of a datastore provider type
or pass an instance of a datastore provider type:

[source, JAVA]
----
Map<String, Object> properties = new HashMap<String, Object>();

// pass the type
properties.put( OgmProperties.DATASTORE_PROVIDER, MongoDBDatastoreProvider.class );

EntityManagerFactory emf = Persistence.createEntityManagerFactory( "my-pu", properties );
----

====


By default, a datastore provider chooses the grid dialect transparently
but you can override this setting with the `hibernate.ogm.datastore.grid_dialect` option.
Use the fully qualified class name of the [classname]`GridDialect` implementation.
Most users should ignore this setting entirely.

Let's now look at the specifics of each datastore provider.
How to configure it further, what mapping structure is used and more.
