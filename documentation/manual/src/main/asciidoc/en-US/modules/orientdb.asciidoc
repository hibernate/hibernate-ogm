[[ogm-orientdb]]

== OrientDB

http://www.orientdb.com[OrientDB] is a robust (fully ACID) transactional property multi-model (graph and document) database.

Hibernate OGM can connect to an embedded OrientDB (in-memory database or local filesystem) or a remote server.
The connection to the remote server can occur via the native OrientDB binary protocol.

=== How to add OrientDB integration

.1. Add the dependencies to your project

If your project uses Maven you can add this to the pom.xml:
====
[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
    <groupId>org.hibernate.ogm</groupId>
    <artifactId>hibernate-ogm-orientdb</artifactId>
    <version>{hibernate-ogm-version}</version>
</dependency>
----
====
or
====
[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
    <groupId>org.hibernate.ogm</groupId>
    <artifactId>hibernate-ogm-orientdb-remote</artifactId>
    <version>{hibernate-ogm-version}</version>
</dependency>
----
====

Alternatively you can find the required libraries in the distribution package on
https://downloads.sourceforge.net/project/hibernate/hibernate-ogm/{hibernate-ogm-version}/hibernate-ogm-{hibernate-ogm-version}-dist.zip[SourceForge]

.2. Use the following properties

If you want to use OrientDB in embedded mode:

====
[source, properties]
[subs="verbatim,attributes"]
----
hibernate.ogm.datastore.provider = orientdb
hibernate.ogm.orientdb.storage=memory
----
====

If you want to connect to a remote server, you can use:

====
[source, properties]
[subs="verbatim,attributes"]
----
hibernate.ogm.datastore.provider = orientdb_remote
----
====

You can select a different host, port and enable authentication with the following additional properties:

====
[source, properties]
[subs="verbatim,attributes"]
----
hibernate.ogm.datastore.provider = orientdb_remote
hibernate.ogm.datastore.host = example.com:2424
hibernate.ogm.datastore.username = example_username
hibernate.ogm.datastore.password = example_password
----
====

=== Configuring OrientDB

The following properties are available to configure OrientDB support:

.OrientDB datastore configuration properties
hibernate.ogm.datastore.provider::
Used provider. Values that linked with OrientDB are `ORIENTDB` (for embedded using) and `ORIENTDB_REMOTE` (for remoting using).
hibernate.ogm.orientdb.format.datetime (optional)::
Datetime format for OrientDB. Default value is: `yyyy-MM-dd HH:mm:ss z`
hibernate.ogm.orientdb.format.date (optional)::
Date format for OrientDB. Default value is: `yyyy-MM-dd`
hibernate.ogm.orientdb.dbtype (optional)::
Type of database. Available values are: `document`, `graph`. Default value is `document`.
hibernate.ogm.orientdb.storage (optional)::
Type of storage. Available values are: `memory`,`plocal`,`remote`. Default value for embedded using is `memory`. Default value for remote using is `remote`.
hibernate.ogm.orientdb.pool.size (optional)::
Size of connection pool to datastorage. Default value is 10.
hibernate.ogm.orientdb.remote.root.username (optional)::
Username of OrientDB root user. The root user name requred for create/remote database in `remote` storage. Default value is `root`
hibernate.ogm.orientdb.remote.root.password (optional)::
Password of OrientDB root user. Default value is `root`
hibernate.ogm.datastore.host (optional)::
The host name and the port to use when connecting to a remote server.
hibernate.ogm.datastore.username::
The authentication username for the datastorage.
hibernate.ogm.datastore.password::
The password to use when connecting to the datastorage.

[NOTE]
====
When bootstrapping a session factory or entity manager factory programmatically,
you should use the constants defined on `org.hibernate.ogm.datastore.orientdb.OrientDBProperties` (or `org.hibernate.ogm.datastore.orientdbremote.RemoteOrientDBProperties` )
when specifying the configuration properties listed above.

Common properties shared between stores are declared on `OgmProperties`
(a super interface of `OrientDBProperties`).

For maximum portability between stores, use the most generic interface possible.
====

[[ogm-orientdb-storage-principles]]
=== Storage principles

Hibernate OGM tries to make the mapping to the underlying datastore as natural as possible
so that third party applications not using Hibernate OGM can still read
and update the same datastore.

Each entity is represented by a class (see details at link:http://orientdb.com/docs/2.2.x/Concepts.html#class[Class] ).
All Links between entities are represented by links between classes (see details at link:http://orientdb.com/docs/2.2.x/Concepts.html#relationships[Relationships]).

[[ogm-orientdb-built-in-types]]
==== Properties and built-in types

Each entity is represented by a class.Each property or more precisely column is represented by an field of the class.
Supported data types described in link:http://orientdb.com/docs/2.2/Types.html[Types]

The following types *NOT* supported in OrientDB and the module:
* [classname]`java.lang.Calendar`

Also, OrientDB not supports BLOB objects.

The following types (and corresponding primitives) get passed to OrientDB without any conversion:

* [classname]`java.lang.Boolean`; Optionally the annotations `@Type(type = "true_false")`, `@Type(type = "yes_no")` and `@Type(type = "numeric_boolean")` can be used to map boolean properties to the characters 'T'/'F', 'Y'/'N' or the int values 0/1, respectively.
* [classname]`java.lang.Character`
* [classname]`java.lang.Byte`
* [classname]`java.lang.Short`
* [classname]`java.lang.Integer`
* [classname]`java.lang.Long`
* [classname]`java.lang.Float`
* [classname]`java.lang.Double`
* [classname]`java.lang.String`
* [classname]`java.math.BigDecimal`

The following types get converted into [classname]`java.lang.String`:

* [classname]`java.math.BigInteger`
* [classname]`java.util.UUID`
* [classname]`java.util.URL`
* [classname]`java.util.Date`


[NOTE]
====
Hibernate OGM doesn't store null values in OrientDB,
setting a value to null is the same as removing the corresponding entry
from OrientDB.

This can have consequences when it comes to queries on null value.
====

Hibernate OGM supports using OrientDB system field as field type.
Entity can have field `@rid` (type is [classname]`com.orientechnologies.orient.core.id.ORecordId`).

.Example of using `@rid` field
====
[source, JAVA]
----
@Entity
public class BuyingOrder implements Serializable {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long bKey;
  @Column(name = "@rid")
  private ORecordId rid;
  // getters, setters and other fields ...
----
====

[IMPORTANT]
====
OrientDB generated temporary `@rid` value during transaction. OrientDB change the `@rid` after the transaction commited.
In this way, `@rid` column can *not* be a primary key. Entity must contains field for  own primary key.
====

==== Entities

Entities are stored as OrientDB classes,
which means each entity field will be translated into a field of the class.
The name of entity class mapping to name of class in schema.

You can use the name property of the [classname]`@Table` and [classname]`@Column` annotations
to rename the class's name or the class's field.

===== Identifiers and unique constraints

[WARNING]
====
OrientDB does not support constraints on more than one property.
For this reason, Hibernate OGM will create a unique constraint ONLY when it spans
a single property and it will ignore the ones spanning multiple properties.

The lack of unique constraints on node properties might result in the creation of multiple
nodes with the same identifier.

For details see link:http://orientdb.com/docs/2.2/Schema.html#constraints[Constraints]
====

Hibernate OGM will create unique constraints for the identifier of entities and for the properties
annotated with:

* `@Id`
* `@NaturalId`
* `@Column( unique = true )`
* `@Table( uniqueConstraints = @UniqueConstraint(columnNames = { "column_name" } ) )`

[WARNING]
====
OrientDB not supports composite primary keys. In this way, annotation `@EmbeddedId` not supported.
====

Embedded identifiers are currently stored as dot separated properties.

===== Embedded objects and collections

Embedded entities stored as other OrientDB class. Link between embedded class and container is field with type `EMBEDDED`.

The type of the relationship that connects the entity node to the embedded node is
the attribute name representing the embedded in the java class.

==== Associations

An association, bidirectional or unidirectional, is always mapped using one relationship,
beginning at the owning side of the association.
This is possible because in OrientDB relationships can be navigated in both directions.

The type of the relationships depends on the type of the association,
but in general it is the role of the association on the main side.
The only property stored on the relationship is going to be the index of the association when required,
for example when the association is annotated with `@OrderColumn` or when a `java.util.Map` is used.

In OrientDB classes are connected via relationship, this means that we don't need to create properties
which store foreign column keys. This means that annotation like `@JoinColumn` won't have any effect.

Details about relationships in OrientDB at link:http://orientdb.com/docs/2.2.x/Schema.html#relationships[Relationships]

==== Auto-generated Values

Hibernate OGM supports the table generation strategy as well as the sequence generation strategy with OrientDB.


[[ogm-orientdb-transactions]]
=== Transactions

In OrientDB, operations must be executed inside a transaction.
Make sure your interactions with Hibernate OGM are within a transaction when you target OrientDB.

[IMPORTANT]
====
Transactions in OrientDB organized by paradigm *`one thread - one connection - one transaction`*.
In this way, using of nested transactions or two transactions in one thread are *impermissible*!

====

.Example of starting and committing transactions
====
[source, JAVA]
----
Session session = factory.openSession();
Transaction tx = session.beginTransaction();

Account account = new Account();
account.setLogin( "myAccount" );
session.persist( account );

tx.commit();

...

tx = session.beginTransaction();
Account savedAccount =  (Account) session.get( Account.class, account.getId() );
tx.commit();
----
====

In the case of JTA, Hibernate OGM attaches the OrientDB internal transaction to the JTA
transaction lifecycle.
That way when the JTA transaction is committed or rollbacked (for example by an EJB CMT or
explicitly), the OrientDB transaction is also committed or rollbacked.
This makes for a nice integration in a Java EE container.

[CAUTION]
====
This is NOT a true JTA/XA integration but more a lifecycle alignment:
changes on more than one datasource won't be executed as a single atomic transaction.

In particular, if the JTA transaction involves multiple resources, OrientDB might commit
before a failure of another resource. In this case, Neo4j won't be able to rollback even
if the JTA transaction will.
====

[[ogm-orientdb-queries]]
=== Queries

[[ogm-orientdb-queries-native]]
==== SQL queries (native OrientDB dialect)

Hibernate OGM supports link:http://orientdb.com/docs/2.2.x/SQL.html[OrientDB dialect for SQL].
You can execute native queries as shown in the following example:

.Using the JPA API
====
[source, JAVA]
----
@Entity
public class Poem {

    @Id
    private Long id;

    private String name;

    private String author;

   // getters, setters ...

}

...

javax.persistence.EntityManager em = ...

// a single result query
String query1 = "Select from Poem where name='Portia' and author='Oscar Wilde'";
Poem poem = (Poem) em.createNativeQuery( query1, Poem.class ).getSingleResult();

// query with order by
String query2 = "Select from Poem where name='Portia' and author='Oscar Wilde' ORDER BY name";
List<Poem> poems = em.createNativeQuery( query2, Poem.class ).getResultList();

----
====

.Using the Hibernate native API
====
[source, JAVA]
----
OgmSession session = ...

String query1 = "Select from Poem where name='Portia' and author='Oscar Wilde'";
Poem poem = session.createNativeQuery( query1 )
                      .addEntity( "Poem", Poem.class )
                      .uniqueResult();

String query2 = "Select from Poem where name='Portia' and author='Oscar Wilde' ORDER BY name";
List<Poem> poems = session.createNativeQuery( query2 )
                      .addEntity( "Poem", Poem.class )
                      .list();
----
====

Native queries can also be created using the `@NamedNativeQuery` annotation:

.Using @NamedNativeQuery
====
[source, JAVA]
----
@Entity
@NamedNativeQuery(
   name = "AthanasiaPoem",
   query = "SELECT FROM Poem where name='Athanasia' and author='Oscar Wilde'",
   resultClass = Poem.class )
public class Poem { ... }

...

// Using the EntityManager
Poem poem1 = (Poem) em.createNamedQuery( "AthanasiaPoem" )
                     .getSingleResult();

// Using the Session
Poem poem2 = (Poem) session.getNamedQuery( "AthanasiaPoem" )
                     .uniqueResult();
----
====

Hibernate OGM stores data in a natural way so you can still execute queries using your favorite tool,
the main drawback is that the results are going to be raw OrientDB elements and not managed entities.

[[ogm-orientdb-limitations]]
=== Known Limitations & Future improvements
.Limitations
. Hibernate OGM uses version `2.2.14` of OrientDB. The version not supports transactions in `remote` mode correctry. (OrientDB team promises to fix the problem in version `3.0.0`.)
. Embedded entities can not be indexed. (OrientDB team promises to fix the problem in version `3.0.0`.)
. Embedded entities can not be a primary key. (OrientDB team promises to fix the problem in version `3.0.0`.)
. System field `@rid` can not be a primary key.

.Future improvements
. Support `graph` database API
