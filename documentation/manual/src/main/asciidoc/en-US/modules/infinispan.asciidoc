[[ogm-infinispan]]

=== Infinispan

Infinispan is an open source in-memory data grid focusing on high performance.
As a data grid, you can deploy it on multiple servers - referred to as nodes -
and connect to it as if it were a single storage engine:
it will cleverly distribute both the computation effort and the data storage.

It is trivial to setup on a single node, in your local JVM,
so you can easily try Hibernate OGM.
But Infinispan really shines in multiple node deployments:
you will need to configure some networking details
but nothing changes in terms of application behaviour,
while performance and data size can scale linearly.

From all its features we'll only describe those relevant to Hibernate OGM;
for a complete description of all its capabilities and configuration options,
refer to the Infinispan project documentation at
http://infinispan.org[infinispan.org].

[[ogm-infinispan-configuration]]

==== Configure Infinispan

Two steps basically:

* Add the dependencies to classpath
* And then choose one of:

** Use the default Infinispan configuration (no action needed)
** Point to your own configuration resource name
** Point to a [acronym]+JNDI+ name of an existing Infinispan instance


[[ogm-infinispan-adddepencies]]

===== Adding Infinispan dependencies

To add the dependencies via some Maven-definitions-using tool,
add the following module:


[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
    <groupId>org.hibernate.ogm</groupId>
    <artifactId>hibernate-ogm-infinispan</artifactId>
    <version>{hibernate-ogm-version}</version>
</dependency>
----

If you're not using a dependency management tool,
copy all the dependencies from the distribution in the directories:

* +/lib/required+
* +/lib/infinispan+
* Optionally - depending on your container - you might need some of the jars from +/lib/provided+


[[ogm-infinispan-configuration-properties]]

===== Infinispan specific configuration properties

The advanced configuration details of an Infinispan Cache
are defined in an Infinispan specific XML configuration file;
the Hibernate OGM properties are simple
and usually just point to this external resource.

To use the default configuration provided by Hibernate OGM -
which is a good starting point for new users - you don't have to set any property.

.Infinispan datastore configuration properties
+hibernate.ogm.datastore.provider+::
To use Infinispan as a datastore provider set it to +infinispan+.
+hibernate.ogm.infinispan.cachemanager_jndi_name+::
If you have an Infinispan [classname]+EmbeddedCacheManager+  registered in JNDI,
provide the JNDI name and Hibernate OGM will use this instance
instead of starting a new +CacheManager+.
This will ignore any further configuration properties
as Infinispan is assumed being already configured.
+hibernate.ogm.infinispan.configuration_resource_name+::
Should point to the resource name of an Infinispan configuration file.
This is ignored in case [acronym]+JNDI+  lookup is set.
Defaults to +org/hibernate/ogm/datastore/infinispan/default-config.xml+.
+hibernate.ogm.datastore.keyvalue.cache_storage+::
The strategy for persisting data in Infinispan.
The following two strategies exist (values of the +org.hibernate.ogm.datastore.keyvalue.options.CacheStorageType+ enum):
+CACHE_PER_KIND+
(Three caches will be used: one cache for all entities, one cache for all associations and one cache for all id sources) and
+CACHE_PER_TABLE+
(A dedicated cache will be used for each entity type, association type and id source table).
Defaults to +CACHE_PER_TABLE+.

[NOTE]
====
When bootstrapping a session factory or entity manager factory programmatically,
you should use the constants accessible via +InfinspanProperties+
when specifying the configuration properties listed above.
Common properties shared between stores are declared on +OgmProperties+.
To ease migration between stores, it is recommended to reference these constants directly from there.
====

===== Cache names used by Hibernate OGM

Hibernate OGM will not use a single Cache but three
and is going to use them for different purposes;
so that you can configure the Caches meant for each role separately.

.Infinispan cache names and purpose
+ENTITIES+::
Is going to be used to store the main attributed of your entities.
+ASSOCIATIONS+::
Stores the association information which maps to the relations between your entities.
+IDENTIFIER_STORE+::
Contains internal metadata that Hibernate OGM needs
to provide sequences and auto-incremental numbers for primary key generation.

We'll explain in the following paragraphs how you can take advantage of this
and which aspects of Infinispan you're likely to want to reconfigure from their defaults.
All attributes and elements from Infinispan which we don't mention are safe to ignore.
Refer to the https://docs.jboss.org/author/display/ISPN/User+Guide[Infinispan User Guide]
for the guru level performance tuning and customizations.

An Infinispan configuration file is an XML file complying with the Infinispan schema;
the basic structure is shown in the following example:

.Simple structure of an infinispan xml configuration file
====
[source, XML]
----
<?xml version="1.0" encoding="UTF-8"?>
<infinispan
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:infinispan:config:6.0 http://www.infinispan.org/schemas/infinispan-config-6.0.xsd"
    xmlns="urn:infinispan:config:6.0">


    <global>
    </global>

    <default>
    </default>

    <namedCache name="ENTITIES">
    </namedCache>

    <namedCache name="ASSOCIATIONS">
    </namedCache>

    <namedCache name="IDENTIFIERS">
    </namedCache>

</infinispan>
----
====

The +global+ section contains elements which affect the whole instance;
mainly of interest for Hibernate OGM users is the +transport+ element
in which we'll set JGroups configuration overrides.

In the +namedCache+ section (or in +default+ if we want to affect all named caches)
we'll likely want to configure clustering modes, eviction policies and ++CacheStore++s.

[[ogm-infinispan-storage]]

==== Manage data size

In its default configuration Infinispan stores all data in the heap of the JVM;
in this barebone mode it is conceptually not very different than using a HashMap:
the size of the data should fit in the heap of your VM,
and stopping/killing/crashing your application will get all data lost
with no way to recover it.

To store data permanently (out of the JVM memory) a +CacheStore+ should be enabled.
The +infinispan-core.jar+ includes a simple implementation
able to store data in simple binary files, on any read/write mounted filesystem;
this is an easy starting point, but the real stuff is to be found
in the additional modules found in the Infinispan distribution.
Here you can find many more implementations to store your data in anything
from JDBC connected relational databases, other NoSQL engines,
to cloud storage services or other Infinispan clusters.
Finally, implementing a custom +CacheStore+ is a trivial programming exercise.

To limit the memory consumption of the precious heap space,
you can activate a +passivation+ or an +eviction+ policy;
again there are several strategies to play with,
for now let's just consider you'll likely need one to avoid running out of memory
when storing too many entries in the bounded JVM memory space;
of course you don't need to choose one while experimenting with limited data sizes:
enabling such a strategy doesn't have any other impact
in the functionality of your Hibernate OGM application
(other than performance: entries stored in the Infinispan in-memory space
is accessed much quicker than from any CacheStore).

A +CacheStore+ can be configured as write-through,
committing all changes to the +CacheStore+ before returning (and in the same transaction)
or as write-behind.
A write-behind configuration is normally not encouraged in storage engines,
as a failure of the node implies some data might be lost
without receiving any notification about it,
but this problem is mitigated in Infinispan because of its capability
to combine CacheStore write-behind
with a synchronous replication to other Infinispan nodes.

.Enabling a FileCacheStore and eviction
====


[source, XML]
----
<namedCache name="ENTITIES">
  <eviction strategy="LIRS" maxEntries="2000" />
  <loaders
    passivation="true" shared="false">
    <loader
      class="org.infinispan.loaders.file.FileCacheStore"
      fetchPersistentState="false"
      purgeOnStartup="false">
      <properties>
        <property name="location" value="/var/hibernate-ogm/myapp/entities-data" />
      </properties>
    </loader>
  </loaders>
</namedCache>
----

====

In this example we enabled both +eviction+ and a +CacheStore+ (the +loader+ element).
+LIRS+ is one of the choices we have for eviction strategies.
Here it is configured to keep (approximately) 2000 entries in live memory
and evict the remaining as a memory usage control strategy.

The +CacheStore+ is enabling +passivation+,
which means that the entries which are evicted are stored on the filesystem.

[WARNING]
====
You could configure an eviction strategy while not configuring a passivating CacheStore!
That is a valid configuration for Infinispan but will have the evictor permanently remove entries.
Hibernate OGM will break in such a configuration.
====

[TIP]
====
Currently with Infinispan 5.1,
the [classname]+FileCacheStore+ is neither very fast nor very efficient:
we picked it for ease of setup.
For a production system it's worth looking at the large collection
of high performance and cloud friendly cachestores
provided by the Infinispan distribution.
====

[[ogm-infinispan-clustering]]

==== Clustering: deploy multiple Infinispan nodes

The best thing about Infinispan is that all nodes are treated equally
and it requires almost no beforehand capacity planning:
to add more nodes to the cluster you just have to start new JVMs,
on the same or different physical server,
having your same Infinispan configuration and your same application.

Infinispan supports several clustering _cache modes_;
each mode provides the same API and functionality
but with different performance, scalability and availability options:

.Infinispan cache modes
local::
Useful for a single VM: networking stack is disabled
replication::
All data is replicated to each node;
each node contains a full copy of all entries.
Consequentially reads are faster but writes don't scale as well.
Not suited for very large datasets.
distribution::
Each entry is distributed on multiple nodes for redundancy and failure recovery,
but not to all the nodes.
Provides linear scalability for both write and read operations.
distribution is the default mode.

To use the +replication+ or +distribution+ cache modes
Infinispan will use JGroups to discover and connect to the other nodes.

In the default configuration,
JGroups will attempt to autodetect peer nodes using a multicast socket;
this works out of the box in the most network environments
but will require some extra configuration in cloud environments
(which often block multicast packets) or in case of strict firewalls.
See the http://www.jgroups.org/manual/html_single/[JGroups reference documentation],
specifically look for _Discovery Protocols_ to customize the detection of peer nodes.

Nowadays, the [acronym]+JVM+ defaults to use [acronym]+IPv6+ network stack;
this will work fine with JGroups, but only if you configured [acronym]+IPv6+ correctly.
It is often useful to force the [acronym]+JVM+ to use [acronym]+IPv4+.

It is also useful to let JGroups know which networking interface you want to use;
especially if you have multiple interfaces it might not guess correctly.

.JVM properties to set for clustering
====
[source]
----
#192.168.122.1 is an example IPv4 address
-Djava.net.preferIPv4Stack=true -Djgroups.bind_addr=192.168.122.1
----
====

[NOTE]
====
You don't need to use [acronym]+IPv4+: JGroups is compatible with [acronym]+IPv6+
provided you have routing properly configured and valid addresses assigned.

The +jgroups.bind_addr+ needs to match a placeholder name
in your JGroups configuration in case you don't use the default one.
====

The default configuration uses +distribution+ as cache mode
and uses the +jgroups-tcp.xml+ configuration for JGroups,
which is contained in the Infinispan jar
as the default configuration for Infinispan users.
Let's see how to reconfigure this:

.Reconfiguring cache mode and override JGroups configuration
====
[source, XML]
----
<?xml version="1.0" encoding="UTF-8"?>
<infinispan
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:infinispan:config:6.0 http://www.infinispan.org/schemas/infinispan-config-6.0.xsd"
    xmlns="urn:infinispan:config:6.0">

    <global>
        <transport
            clusterName="HibernateOGM-Infinispan-cluster">
            <properties>
                <property name="configurationFile" value="my-jgroups-conf.xml" />
            </properties>
        </transport>
    </global>

    <default>
        <clustering
            mode="distribution" />
    </default>

    <!-- Cache to store the OGM entities -->
    <namedCache
        name="ENTITIES">
    </namedCache>

    <!-- Cache to store the relations across entities -->
    <namedCache
        name="ASSOCIATIONS">
    </namedCache>

    <!-- Cache to store identifiers -->
    <namedCache
        name="IDENTIFIERS">
        <!-- Override the cache mode: -->
        <clustering
            mode="replication" />
    </namedCache>

</infinispan>
----
====

In the example above we specify a custom JGroups configuration file
and set the cache mode for the default cache to +distribution+;
this is going to be inherited by the +ENTITIES+ and the +ASSOCIATIONS+ caches.
But for +IDENTIFIERS+ we have chosen (for the sake of this example) to use +replication+.

Now that you have clustering configured, start the service on multiple nodes.
Each node will need the same configuration and jars.

[TIP]
====
We have just shown how to override the clustering mode
and the networking stack for the sake of completeness, but you don't have to!

Start with the default configuration and see if that fits you.
You can fine tune these setting when you are closer to going in production.
====

[[ogm-infinispan-storage-principles]]
==== Storage principles

[[ogm-infinispan-built-in-types]]
===== Builtin types

[NOTE]
====
Hibernate OGM doesn't store null values in Infinispan,
setting a value to null is the same as removing the corresponding entry
from Infinispan.
====

Hibernate OGM support by default the following types:

* [classname]+java.lang.String+
* [classname]+java.lang.Boolean+ (or boolean primitive)
* [classname]+java.lang.Byte+ (or byte primitive)
* [classname]+java.lang.Long+ (or long primitive)
* [classname]+java.lang.Integer+ (or integer primitive)
* [classname]+java.lang.Double+ (or double primitive)

* [classname]+java.math.BigDecimal+
* [classname]+java.math.BigInteger+

* [classname]+java.util.Calendar+
* [classname]+java.util.Date+
* [classname]+java.util.UUID+
* [classname]+java.util.URL+

====== Identifiers

Hibernate OGM will map the identifier of an entity as key of the entry of in the cache.

The key is going to be a +org.hibernate.ogm.model.key.spi.EntityKey+ instance containing the entityu
table name and the key columns names and values.

.Define an identifier as a primitive type
====
[source, JAVA]
----
@Entity
public class Bookmark {

    @Id
    private Long id;

    private String title;

    // getters, setters ...
}
----

.Content of the ENTITY cache
[cols="3*", options="header"]
|===
     ^| KEY                   2+^| MAP ENTRIES

.2+^.^| "Bookmark", ["id"], [42] | id       | 42 
                                 | title    | "Hibernate OGM documentation" 
|===
====

.Define an identifier using @EmbeddedId
====
[source, JAVA]
----
@Embeddable
public class NewsID implements Serializable {

    private String title;
    private String author;

    // getters, setters ...
}

@Entity
public class News {

    @EmbeddedId
    private NewsID newsId;
    private String content;

    // getters, setters ...
}
----

.Content of the ENTITY cache
[cols="3*", options="header"]
|===
     ^| KEY
   2+^| MAP ENTRIES

.3+^.^| "News",[newsId.author, newsId.title], ["Guillaume", "How to use Hibernate OGM ?"]
      | newsId.author  | "Guillaume"

      | newsId.title   | "How to use Hibernate OGM ?"

      | content        | "Simple, just like ORM but with a NoSQL database"
|===
====

====== Identifier generation strategies

The only table strategy available in infinispan is the +TABLE+ one.
Selecting a different strategies won't cause any execption but Hibernate OGM will still rely on the
+TABLE+ strategy to generate identifiers.

.Id generation strategy TABLE using default values
====
[source, JAVA]
----
@Entity
public class GuitarPlayer {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE)
    private long id;

    private String name;

    // getters, setters ...
}

----

.Content of the IDENTIFIERS cache

[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | [type=TABLE, name=hibernate_sequences, keyColumnName=sequence_name, valueColumnName=next_val],
      columnNames=[sequence_name], columnValues=[default] 
^.^|  2
|===
====

.Id generation strategy TABLE using a custom table
====
[source, JAVA]
----
@Entity
public class GuitarPlayer {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE, generator = "guitarGen")
    @TableGenerator(
        name = "guitarGen",
        table = "GuitarPlayerSequence",
        pkColumnValue = "guitarPlayer",
        valueColumnName = "nextGuitarPlayerId"
    )
    private long id;

    // getters, setters ...
}

----

.Content of the IDENTIFIERS cache

[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE

   | [type=TABLE, name=GuitarPlayerSequence, keyColumnName=sequence_name,
     valueColumnName=nextGuitarPlayerId], columnNames=[sequence_name], columnValues=[guitarPlayer]
^.^| 2
|===
====

.SEQUENCE id generation strategy
====
[source, JAVA]
----
@Entity
public class Song {

  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "songSequenceGenerator")
  @SequenceGenerator(
      name = "songSequenceGenerator",
      sequenceName = "song_sequence",
      initialValue = 2,
      allocationSize = 20
  )
  private Long id;

  private String title;

  // getters, setters ...
}
----

[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | [type="TABLE", "name"="hibernate_sequences", keyColumnName="sequence_name", 
      valueColumnName="next_val]", columnNames=[sequence_name], columnValues=[song_sequence_name]
^.^| 11
|===
====

===== Entities

Entites are stored in the +ENTITIES+ cache.
The type of an entry key in the cache is [classname]+org.hibernate.ogm.model.key.spi.EntityKey+
containing teh columns names and values of the identifier and the table name.

The entry value is an instance of [classname]+org.infinispan.atomic.FineGrainedMap+ which contains
all the properties names and values respectevely as keys and values of the map.

.Default JPA mapping for an entity
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;
    private String title;

    // getters, setters ...
}
----

.Content of the ENTITIES cache

[cols="3*", options="header"]
|===
     ^| KEY                        2+^| MAP ENTRIES

.2+^.^| "News", ["id"], ["1234-5678"] | id       | "1234-5678"
                                      | title    | "On the merits of NoSQL" 
|===
====

.Rename field and collection using @Table and @Column
====
[source, JAVA]
----
@Entity
@Table(name = "Article")
public class News {

    @Id
    private String id;

    @Column(name = "headline")
    private String title;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                               2+^| MAP ENTRIES

.2+^.^| "Article", ["id"], ["1234-5678"]     | id       | "1234-5678"
                                             | headline | "On the merits of NoSQL" 
|===
====

====== Embedded objects and collections

.Embedded object
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;
    private String title;

    @Embedded
    private NewsPaper paper;

    // getters, setters ...
}

@Embeddable
public class NewsPaper {

    private String name;
    private String owner;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                               2+^| MAP ENTRIES

.4+^.^| "Article", ["id"], ["1234-5678"]     | id          | "1234-5678"
                                             | title       | "On the merits of NoSQL" 
                                             | paper.name  | "NoSQL journal of prophecies" 
                                             | paper.owner | "Delphy" 
|===
====

.@ElementCollection with one attribute
====
[source, JAVA]
----
@Entity
public class GrandMother {

    @Id
    private String id;

    @ElementCollection
    private List<GrandChild> grandChildren = new ArrayList<GrandChild>();

    // getters, setters ...
}

@Embeddable
public class GrandChild {

    private String name;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                            2+^| MAP ENTRIES
   ^.^| "GrandMother", ["id"], ["granny"] | id          | "granny"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.2+^.^| "GrandMother_grandChildren", ["GrandMother_id"], ["granny"]
.2+^.^| ["GrandMother_id", "name"], ["granny", "Leia"]
      | GrandMother_id
      | "granny"

      | name
      | "Leia"

.2+^.^| "GrandMother_grandChildren", ["GrandMother_id"], ["granny"]
.2+^.^| ["GrandMother_id", "name"], ["granny", "Luke"]
      | GrandMother_id
      | "granny"

      | name
      | "Luke"
|===
====

.@ElementCollection with @OrderColumn
====
[source, JAVA]
----
@Entity
public class GrandMother {

    @Id
    private String id;

    @ElementCollection
    @OrderColumn( name = "birth_order" )
    private List<GrandChild> grandChildren = new ArrayList<GrandChild>();

    // getters, setters ...
}

@Embeddable
public class GrandChild {

    private String name;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                            2+^| MAP ENTRIES
   ^.^| "GrandMother", ["id"], ["granny"] | id          | "granny"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.3+^.^| "GrandMother_grandChildren", ["GrandMother_id"], ["granny"]
.3+^.^| ["GrandMother_id", "birth_order"], ["granny", 0]
      | GrandMother_id
      | "granny"

      | birth_order
      | 0

      | name
      | "Leia"

.3+^.^| "GrandMother_grandChildren", ["GrandMother_id"], ["granny"]
.3+^.^| ["GrandMother_id", "birth_order"], ["granny", 1]
      | GrandMother_id
      | "granny"

      | birth_order
      | 1

      | name
      | "Luke"
|===
====

===== Associations

.Unidirectional one-to-one
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}

@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    private Vehicule vehicule;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| "Vehicule", ["id"], ["V_01"] | id             | "V_01"
                                     | brand          | "Mercedes"

.3+^.^| "Wheel", ["id"], ["W001"]    | id             | "W001"
                                     | diameter       | 0.0
                                     | vehicule_id    | "V_01"
|===
====

[[infinispan-in-entity-one-to-one-join-column]]
.Unidirectional one-to-one with @JoinColumn
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}


@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    @JoinColumn( name = "part_of" )
    private Vehicule vehicule;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| "Vehicule", ["id"], ["V_01"] | id             | "V_01"
                                     | brand          | "Mercedes"

.3+^.^| "Wheel", ["id"], ["W001"]    | id             | "W001"
                                     | diameter       | 0.0
                                     | part_of       | "V_01"
|===
====

.Unidirectional one-to-one with @MapsId and @PrimaryKeyJoinColumn
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}

@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    @PrimaryKeyJoinColumn
    @MapsId
    private Vehicule vehicule;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                                2+^| MAP ENTRIES

.2+^.^| "Vehicule", ["id"], ["V_01"]          | id             | "V_01"
                                              | brand          | "Mercedes"

.2+^.^| "Wheel", ["vehicule_id"], ["V_01"]    | vehicule_id    | "V_01"
                                              | diameter       | 0.0
|===
====

.Bidirectional one-to-one
====
[source, JAVA]
----
@Entity
public class Husband {

    @Id
    private String id;
    private String name;

    @OneToOne
    private Wife wife;

    // getters, setters ...
}

@Entity
public class Wife {

    @Id
    private String id;
    private String name;

    @OneToOne
    private Husband husband;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES
.3+^.^| "Husband", ["id"], ["alex"]  | id             | "alex"
                                     | name           | "Alex"
                                     | wife           | "bea"

.2+^.^| "Wife", ["id"], ["bea"]      | id             | "bea"
                                     | name           | "Bea"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.2+^.^| "Husband", ["wife"], ["bea"]
.2+^.^| ["id", "wife"], ["alex", "bea"]
      | id
      | "alex"

      | wife
      | "bea"
|===
====

.Unidirectional one-to-many
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| "Basket", ["id"], ["davide_basket"] | id               | "davide_basket"
                                            | owner            | "Davide"

.2+^.^| "Product", ["name"], ["Beer"]       | name             | "Beer"
                                            | description      | "Tactical Nuclear Penguin"

.2+^.^| "Product", ["name"], ["Pretzel"]    | name             | "Pretzel"
                                            | description      | "Glutino Pretzel Sticks"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.4+^.^| "Basket_Product", ["Basket_id"], ["davide_basket"]
.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Beer"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Beer"

.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Pretzel"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Pretzel"


|===
====

.Unidirectional one-to-many with +@JoinTable+
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    @JoinTable( name = "BasketContent" )
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| "Basket", ["id"], ["davide_basket"] | id               | "davide_basket"
                                            | owner            | "Davide"

.2+^.^| "Product", ["name"], ["Beer"]       | name             | "Beer"
                                            | description      | "Tactical Nuclear Penguin"

.2+^.^| "Product", ["name"], ["Pretzel"]    | name             | "Pretzel"
                                            | description      | "Glutino Pretzel Sticks"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.4+^.^| "BasketContent", ["Basket_id"], ["davide_basket"]
.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Beer"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Beer"

.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Pretzel"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Pretzel"
|===
====

.Unidirectional one-to-many using maps with defaults
====
[source, JAVA]
----
@Entity
public class User {

    @Id
    private String id;

    @OneToMany
    private Map<String, Address> addresses = new HashMap<String, Address>();

    // getters, setters ...
}

@Entity
public class Address {

    @Id
    private String id;
    private String city;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                             2+^| MAP ENTRIES

   ^.^| "User", ["id"], ["user_001"]       | id   | "user_001"

.2+^.^| "Address", ["id"], ["address_001"] | id   | "address_001"
                                           | city | "Rome"

.2+^.^| "Address", ["id"], ["address_002"] | id   | "address_002"
                                           | city | "Paris"
|===


.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.6+^.^| "User_address", ["User_id"], "user_001"]
.3+^.^| ["User_id", "addresses_KEY"], ["user_001", "home"]
      | User_id
      | "user_001"

      | addresses_KEY
      | "home"

      | addresses_id
      | "address_001"


.3+^.^| ["User_id", "addresses_KEY"], ["user_001", "work"]
      | User_id
      | "user_002"

      | addresses_KEY
      | "work"

      | addresses_id
      | "address_002"
|===
====

.Unidirectional one-to-many using maps with @MapKeyColumn
====
[source, JAVA]
----
@Entity
public class User {

    @Id
    private String id;

    @OneToMany
    @MapKeyColumn(name = "addressType")
    private Map<String, Address> addresses = new HashMap<String, Address>();

    // getters, setters ...
}

@Entity
public class Address {

    @Id
    private String id;
    private String city;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                             2+^| MAP ENTRIES

   ^.^| "User", ["id"], ["user_001"]       | id   | "user_001"

.2+^.^| "Address", ["id"], ["address_001"] | id   | "address_001"
                                           | city | "Rome"

.2+^.^| "Address", ["id"], ["address_002"] | id   | "address_002"
                                           | city | "Paris"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.6+^.^| "User_address", ["User_id"], "user_001"]
.3+^.^| ["User_id", "addressType"], ["user_001", "home"]
      | User_id
      | "user_001"

      | addressesType
      | "home"

      | addresses_id
      | "address_001"


.3+^.^| ["User_id", "addressType"], ["user_001", "work"]
      | User_id
      | "user_002"

      | addressesType
      | "work"

      | addresses_id
      | "address_002"
|===
====

.Unidirectional many-to-one
====
[source, JAVA]
----
@Entity
public class JavaUserGroup {

    @Id
    private String jugId;
    private String name;

    // getters, setters ...
}

@Entity
public class Member {

    @Id
    private String id;
    private String name;

    @ManyToOne
    private JavaUserGroup memberOf;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES

.2+^.^| "JavaUserGroup", ["jugId"], ["summer_camp"] | jugId           | "summer_camp"
                                                    | name            | "JUG Summer Camp"

.3+^.^| "Member", ["member_id"], ["emmanuel"]       | member_id       | "emmanuel"
                                                    | name            | "Emmanuel Bernard"
                                                    | memberOf_jug_id | "summer_camp"

.3+^.^| "Member", ["member_id"], ["jerome"]         | member_id       | "jerome"
                                                    | name            | "Jerome"
                                                    | memberOf_jug_id | "summer_camp"
|===
====

.Bidirectional many-to-one 
====
[source, JAVA]
----
@Entity
public class SalesForce {

    @Id
    private String id;
    private String corporation;

    @OneToMany(mappedBy = "salesForce")
    private Set<SalesGuy> salesGuys = new HashSet<SalesGuy>();

    // getters, setters ...
}

@Entity
public class SalesGuy {
    private String id;
    private String name;

    @ManyToOne
    private SalesForce salesForce;

    // getters, setters ...
}
----

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES

.2+^.^| "SalesForce", ["id"], ["sales_force"]       | id              | "red_hat"
                                                    | corporation     | "Red Hat"

.3+^.^| "SalesGuy", ["id"], ["eric"]                | id              | "eric"
                                                    | name            | "Eric"
                                                    | salesForce_id   | "red_hat"

.3+^.^| "SalesGuy", ["id"], ["simon"]               | id              | "simon"
                                                    | name            | "Simon"
                                                    | salesForce_id   | "red_hat"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.4+^.^| "SalesGuy", ["salesForce_id"], "red_hat"]
.2+^.^| ["salesForce_id", "id"], ["red_hat", "eric"]
      | salesForce_id
      | "red_hat"

      | id
      | "eric"

.2+^.^| ["salesForce_id", "id"], ["red_hat", "simon"]
      | salesForce_id
      | "red_hat"

      | id
      | "simon"
|===
====

.Unidirectional many-to-many
====
[source, JAVA]
----
@Entity
public class Student {

    @Id
    private String id;
    private String name;

    // getters, setters ...
}

@Entity
public class ClassRoom {

    @Id
    private long id;
    private String lesson;

    @ManyToMany
    private List<Student> students = new ArrayList<Student>();

    // getters, setters ...
}
----

The "Math" class has 2 students: John Doe and Mario Rossi

The "English" class has 2 students: Kate Doe and Mario Rossi

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES

.2+^.^| "ClassRoom", ["id"], [1]       | id         | 1 
                                       | name       | "Math"

.2+^.^| "ClassRoom", ["id"], [2]       | id         | 2 
                                       | name       | "English"

.2+^.^| "Student", ["id"], ["john"]    | id         | "john"
                                       | name       | "John Doe"

.2+^.^| "Student", ["id"], ["mario"]   | id         | "mario"
                                       | name       | "Mario Rossi"

.2+^.^| "Student", ["id"], ["kate"]    | id         | "kate"
                                       | name       | "Kate Doe"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.4+^.^| "ClassRoom_Student", ["ClassRoom_id"], [1]
.2+^.^| ["ClassRoom_id", "students_id"], [1, "mario"]
      | ClassRoom_id
      | 1 

      | students_id
      | "mario"

.2+^.^| ["ClassRoom_id", "students_id"], [1, "john"]
      | ClassRoom_id
      | 1 

      | students_id
      | "john"

.4+^.^| "ClassRoom_Student", ["ClassRoom_id"], [2]
.2+^.^| ["ClassRoom_id", "students_id"], [2, "kate"]
      | ClassRoom_id
      | 2 

      | students_id
      | "kate"

.2+^.^| ["ClassRoom_id", "students_id"], [2, "mario"]
      | ClassRoom_id
      | 2 

      | students_id
      | "mario"
|===
====

.Bidirectional many-to-many 
====
[source, JAVA]
----
@Entity
public class AccountOwner {

    @Id
    private String id;

    private String SSN;

    @ManyToMany
    private Set<BankAccount> bankAccounts;

    // getters, setters ...
}

@Entity
public class BankAccount {

    @Id
    private String id;

    private String accountNumber;

    @ManyToMany( mappedBy = "bankAccounts" )
    private Set<AccountOwner> owners = new HashSet<AccountOwner>();

    // getters, setters ...
}
----

David owns 2 accounts: "012345" and "ZZZ-009"

.Content of the ENTITIES cache
[cols="3*", options="header"]
|===
     ^| KEY                               2+^| MAP ENTRIES

.2+^.^| "AccountOwner", ["id"], ["David"]    | id            | "David"
                                             | SSN           | "0123456"

.2+^.^| "BankAccount", ["id"], ["account_1"] | id            | "account_1"
                                             | accountNumber | "X2345000"

.2+^.^| "BankAccount", ["id"], ["account_2"] | id            | "account_2"
                                             | accountNumber | "ZZZ-009"
|===

.Content of the ASSOCIATIONS cache
[cols="4*", options="header"]
|===
     ^| KEY
   3+^| MAP ENTRIES

.2+^.^| "AccountOwner_BankAccount", ["bankAccounts_id"], ["account_1"]
.2+^.^| ["bankAccounts_id", "owners_id"], ["account_1", "David"]
      | bankAccounts_id
      | "account_1"

      | owners_id
      | "David"

.2+^.^| "AccountOwner_BankAccount", ["owners_id"], ["David"]
.2+^.^| ["owners_id", "banksAccounts_id"], ["Davide", "account_1"]
      | bankAccounts_id
      | "account_1"

      | owners_id
      | "David"

.2+^.^| "AccountOwner_BankAccount", ["bankAccounts_id"], ["account_2"]
.2+^.^| ["bankAccounts_id", "owners_id"], ["account_2", "David"]
      | bankAccounts_id
      | "account_2"

      | owners_id
      | "David"

.2+^.^| "AccountOwner_BankAccount", ["owners_id"], ["Davide"]
.2+^.^| ["owners_id", "banksAccounts_id"], ["David", "account_2"]
      | bankAccounts_id
      | "account_2"

      | owners_id
      | "David"
|===
====

[[ogm-infinispan-transactions]]

==== Transactions

Infinispan supports transactions and integrates with any standard JTA +TransactionManager+;
this is a great advantage for JPA users as it allows to experience a _similar_ behaviour
to the one we are used to when we work with RDBMS databases.

If you're having Hibernate OGM start and manage Infinispan,
you can skip this as it will inject the same [classname]+TransactionManager+ instance
which you already have set up in the Hibernate / JPA configuration.

If you are providing an already started Infinispan CacheManager instance
by using the [acronym]+JNDI+ lookup approach,
then you have to make sure the CacheManager is using the same [classname]+TransactionManager+
as Hibernate:

.Configuring a JBoss Standalone TransactionManager lookup
====
[source, XML]
----
<default>
   <transaction
      transactionMode="TRANSACTIONAL"
      transactionManagerLookupClass=
    "org.infinispan.transaction.lookup.JBossStandaloneJTAManagerLookup" />
</default>
----
====

Infinispan supports different transaction modes like +PESSIMISTIC+ and +OPTIMISTIC+,
supports [acronym]+XA+ recovery and provides many more configuration options;
see the https://docs.jboss.org/author/display/ISPN/User+Guide[Infinispan User Guide]
for more advanced configuration options.

[[ogm-infinispan-indexstorage]]

==== Storing a Lucene index in Infinispan

Hibernate Search, which can be used for advanced query capabilities (see <<ogm-query>>),
needs some place to store the indexes for its embedded +Apache Lucene+ engine.

A common place to store these indexes is the filesystem
which is the default for Hibernate Search;
however if your goal is to scale your NoSQL engine on multiple nodes
you need to share this index.
Network sharing filesystems are a possibility but we don't recommended that.
Often the best option is to store the index
in whatever NoSQL database you are using (or a different dedicated one).

[TIP]
====
You might find this section useful even if you don't intend to store your data in Infinispan.
====

The Infinispan project provides an adaptor to plug into Apache Lucene,
so that it writes the indexes in Infinispan and searches data in it.
Since Infinispan can be used as an application cache to other NoSQL storage engines
by using a CacheStore (see <<ogm-infinispan-storage>>)
you can use this adaptor to store the Lucene indexes
in any NoSQL store supported by Infinispan:

* Cassandra
* Filesystem (but locked correctly at the Infinispan level)
* MongoDB
* HBase
* JDBC databases
* JDBM
* BDBJE
* A secondary (independent) Infinispan grid
* Any Cloud storage service
  http://www.jclouds.org/documentation/reference/supported-providers/[supported by JClouds]


How to configure it? Here is a simple cheat sheet to get you started with this type of setup:

* Add +org.hibernate:hibernate-search-infinispan:{hibernate-search-version}+ to your dependencies
* set these configuration properties:

** +hibernate.search.default.directory_provider = infinispan+
** +hibernate.search.default.exclusive_index_use = false+
** +hibernate.search.infinispan.configuration_resourcename =+ [infinispan configuration filename]


The referenced Infinispan configuration should define a [classname]+CacheStore+
to load/store the index in the NoSQL engine of choice.
It should also define three cache names:

.Infinispan caches used to store indexes
[cols="1,2,1", options="header"]
|===============
|Cache name|Description|Suggested cluster mode
|LuceneIndexesLocking|Transfers locking information. Does not need a cache
            store.|replication
|LuceneIndexesData|Contains the bulk of Lucene data. Needs a cache
            store.|distribution + L1
|LuceneIndexesMetadata|Stores metadata on the index segments. Needs a cache
            store.|replication
|===============

This configuration is not going to scale well on write operations:
to do that you should read about the master/slave and sharding options in Hibernate Search.
The complete explanation and configuration options can be found in the
http://docs.jboss.org/hibernate/search/4.2/reference/en-US/html_single/#infinispan-directories[Hibernate Search Reference Guide]

Some NoSQL support storage of Lucene indexes directly,
in which case you might skip the Infinispan Lucene integration
by implementing a custom [classname]+DirectoryProvider+ for Hibernate Search.
You're very welcome to share the code
and have it merged in Hibernate Search for others to use, inspect, improve and maintain.
