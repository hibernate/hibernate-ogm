[[ogm-ehcache]]

== Ehcache

When combined with Hibernate ORM, Ehcache is commonly used as a 2nd level cache
to cache data whose primary storage is a relational database.
When used with Hibernate OGM it is not "just a cache"
but is the main storage engine for your data.

This is not the reference manual for Ehcache itself:
we're going to list only how Hibernate OGM should be configured to use Ehcache;
for all the tuning and advanced options please refer to the
http://www.ehcache.org/documentation[Ehcache Documentation].

[[ogm-ehcache-configuration]]

=== Configure Ehcache

Two steps:

* Add the dependencies to classpath
* And then choose one of:

** Use the default Ehcache configuration (no action needed)
** Point to your own configuration resource name


[[ogm-ehcache-adddepencies]]

==== Adding Ehcache dependencies

To add the dependencies via some Maven-definitions-using tool,
add the following module:

[source, XML]
[subs="verbatim,attributes"]
----
<dependency>
    <groupId>org.hibernate.ogm</groupId>
    <artifactId>hibernate-ogm-ehcache</artifactId>
    <version>{hibernate-ogm-version}</version>
</dependency>
----

If you're not using a dependency management tool,
copy all the dependencies from the distribution in the directories:

* +/lib/required+
* +/lib/ehcache+
* Optionally - depending on your container -
  you might need some of the jars from +/lib/provided+


[[ogm-ehcache-configuration-properties]]

==== Ehcache specific configuration properties

Hibernate OGM expects you to define an Ehcache configuration
in its own configuration resource;
all what we need to set it the resource name.

To use the default configuration provided by Hibernate OGM -
which is a good starting point for new users - you don't have to set any property.

.Ehcache datastore configuration properties
hibernate.ogm.datastore.provider::
To use Ehcache as a datastore provider set it to +ehcache+.
hibernate.ogm.ehcache.configuration_resource_name::
Should point to the resource name of an Ehcache configuration file.
Defaults to +org/hibernate/ogm/datastore/ehcache/default-ehcache.xml+.
+hibernate.ogm.datastore.keyvalue.cache_storage+::
The strategy for persisting data in EhCache.
The following two strategies exist (values of the +org.hibernate.ogm.datastore.keyvalue.options.CacheMappingType+ enum):

* +CACHE_PER_TABLE+: A dedicated cache will be used for each entity type, association type and id source table.
* +CACHE_PER_KIND+: Three caches will be used: one cache for all entities, one cache for all associations and one cache for all id sources.

+
Defaults to +CACHE_PER_TABLE+. It is the recommended strategy as it makes it easier to target a specific cache for a given entity.

[NOTE]
====
When bootstrapping a session factory or entity manager factory programmatically,
you should use the constants accessible via +EhcacheProperties+
when specifying the configuration properties listed above.

Common properties shared between stores are declared on +OgmProperties+
(a super interface of +EhcacheProperties+).

For maximum portability between stores, use the most generic interface possible.
====

==== Cache names used by Hibernate OGM

Depending on the cache mapping approach, Hibernate OGM will either:

* store each entity type, association type and id source table in a dedicated cache
  very much like what Hibernate ORM would do. This is the +CACHE_PER_TABLE+ approach.
* store data in three different caches when using the +CACHE_PER_KIND+ approach:
** +ENTITIES+: is going to be used to store the main attributes of all your entities.
** +ASSOCIATIONS+: stores the association information representing the links between entities.
** +IDENTIFIER_STORE+: contains internal metadata that Hibernate OGM needs
    to provide sequences and auto-incremental numbers for primary key generation.

The preferred strategy is +CACHE_PER_TABLE+ as it offers both more fine grained configuration options
and the ability to work on specific entities in a more simple fashion.

[[ogm-ehcache-storage-principles]]
=== Storage principles

To describe things simply, each entity is stored under a single key.
The value itself is a map containing the columns / values pair.

Each association from one entity instance to (a set of) another is stored under a single key.
The value contains the navigational information to the (set of) entity.

[[ogm-ehcache-built-in-types]]
==== Properties and built-in types

Each entity is represented by a map.
Each property or more precisely column is represented by an entry in this map,
the key being the column name.

Hibernate OGM support by default the following property types:

* [classname]+java.lang.String+
* [classname]+java.lang.Boolean+ (or boolean primitive)
* [classname]+java.lang.Byte+ (or byte primitive)
* [classname]+java.lang.Long+ (or long primitive)
* [classname]+java.lang.Integer+ (or integer primitive)
* [classname]+java.lang.Double+ (or double primitive)

* [classname]+java.math.BigDecimal+
* [classname]+java.math.BigInteger+

* [classname]+java.util.Calendar+
* [classname]+java.util.Date+
* [classname]+java.util.UUID+
* [classname]+java.util.URL+

[NOTE]
====
Hibernate OGM doesn't store null values in Ehcache,
setting a value to null is the same as removing the corresponding entry
from Ehcache.

This can have consequences when it comes to queries on null value.
====

==== Identifiers

Entity identifiers are used to build the key in which the entity is stored in the cache.

The key is comprised of the following information:

* the identifier column names
* the identifier column values
* the entity table (for the +CACHE_PER_KIND+ strategy)

In +CACHE_PER_TABLE+, the table name is inferred from the cache name.
In +CACHE_PER_KIND+, the table name is necessary to identify the entity in the generic cache.

.Define an identifier as a primitive type
====
[source, JAVA]
----
@Entity
public class Bookmark {

    @Id
    private Long id;

    private String title;

    // getters, setters ...
}
----

.Content of the +Bookmark+ cache in +CACHE_PER_TABLE+
[cols="3*", options="header"]
|===
     ^| KEY                   2+^| MAP ENTRIES

.2+^.^| ["id"], [42]             | id       | 42 
                                 | title    | "Hibernate OGM documentation" 
|===

.Content of the +ENTITIES+ cache in +CACHE_PER_KIND+
[cols="3*", options="header"]
|===
     ^| KEY                   2+^| MAP ENTRIES

.2+^.^| "Bookmark", ["id"], [42] | id       | 42 
                                 | title    | "Hibernate OGM documentation" 
|===
====

.Define an identifier using @EmbeddedId
====
[source, JAVA]
----
@Embeddable
public class NewsID implements Serializable {

    private String title;
    private String author;

    // getters, setters ...
}

@Entity
public class News {

    @EmbeddedId
    private NewsID newsId;
    private String content;

    // getters, setters ...
}
----

.Content of the +News+ cache in +CACHE_PER_TABLE+
[cols="3*", options="header"]
|===
     ^| KEY
   2+^| MAP ENTRIES

.3+^.^| [newsId.author, newsId.title], ["Guillaume", "How to use Hibernate OGM ?"]
      | newsId.author  | "Guillaume"

      | newsId.title   | "How to use Hibernate OGM ?"

      | content        | "Simple, just like ORM but with a NoSQL database"
|===

.Content of the +ENTITIES+ cache in +CACHE_PER_KIND+
[cols="3*", options="header"]
|===
     ^| KEY
   2+^| MAP ENTRIES

.3+^.^| "News", [newsId.author, newsId.title], ["Guillaume", "How to use Hibernate OGM ?"]
      | newsId.author  | "Guillaume"

      | newsId.title   | "How to use Hibernate OGM ?"

      | content        | "Simple, just like ORM but with a NoSQL database"
|===
====

===== Identifier generation strategies

Since Ehcache has not native sequence nor identity column support,
these are simulated using the table strategy, however their default values vary.
We highly recommend you explicitly use a +TABLE+ strategy if you want to generate a monotonic identifier.

But if you can, use a pure in-memory and scalable strategy like a UUID generator.

.Id generation strategy TABLE using default values
====
[source, JAVA]
----
@Entity
public class GuitarPlayer {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE)
    private long id;

    private String name;

    // getters, setters ...
}

----

.Content of the +hibernate_sequences+ cache in +CACHE_PER_TABLE+
[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | ["sequence_name"], ["default"]
^.^|  2
|===

.Content of the IDENTIFIERS cache in +CACHE_PER_KIND+
[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | "hibernate_sequences", ["sequence_name"], ["default"]
^.^|  2
|===
====

As you can see, in +CACHE_PER_TABLE+, the key does not contain the id source table name.
It is inferred by the cache name hosting that key.

.Id generation strategy TABLE using a custom table
====
[source, JAVA]
----
@Entity
public class GuitarPlayer {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE, generator = "guitarGen")
    @TableGenerator(
        name = "guitarGen",
        table = "GuitarPlayerSequence",
        pkColumnName = "seq"
        pkColumnValue = "guitarPlayer",
    )
    private long id;

    // getters, setters ...
}

----

.Content of the +GuitarPlayerSequence+ cache in +CACHE_PER_TABLE+
[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | ["seq"], ["guitarPlayer"]
^.^| 2
|===

.Content of the IDENTIFIERS cache in +CACHE_PER_KIND+
[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | "GuitarPlayerSequence", ["seq"], ["guitarPlayer"]
^.^| 2
|===
====

.SEQUENCE id generation strategy
====
[source, JAVA]
----
@Entity
public class Song {

  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "songSequenceGenerator")
  @SequenceGenerator(
      name = "songSequenceGenerator",
      sequenceName = "song_sequence",
      initialValue = 2,
      allocationSize = 20
  )
  private Long id;

  private String title;

  // getters, setters ...
}
----

.Content of the +hibernate_sequences+ cache in +CACHE_PER_TABLE+
[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | ["sequence_name"], ["song_sequence"]
^.^| 11
|===

.Content of the +IDENTIFIERS+ cache in +CACHE_PER_KIND+
[cols="2*", options="header"]
|===
  ^| KEY
  ^| NEXT VALUE
   | "hibernate_sequences", "["sequence_name"], ["song_sequence"]
^.^| 11
|===
====

==== Entities

Entities are stored in the cache named after the entity name when using the +CACHE_PER_TABLE+ strategy.
In the +CACHE_PER_KIND+ strategy, entities are stored in a single cache named +ENTITIES+.

The key is comprised of the following information:

* the identifier column names
* the identifier column values
* the entity table (for the +CACHE_PER_KIND+ strategy)

In +CACHE_PER_TABLE+, the table name is inferred from the cache name.
In +CACHE_PER_KIND+, the table name is necessary to identify the entity in the generic cache.

The entry value is itself a map which contains all the entity properties -
or to be specific columns.
Each column name and value is stored as a key / value pair in the map.

.Default JPA mapping for an entity
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;
    private String title;

    // getters, setters ...
}
----

.Content of the +News+ cache in +CACHE_PER_TYPE+
[cols="3*", options="header"]
|===
     ^| KEY                        2+^| MAP ENTRIES

.2+^.^| ["id"], ["1234-5678"] | id       | "1234-5678"
                                      | title    | "On the merits of NoSQL" 
|===

.Content of the +ENTITIES+ cache in +CACHE_PER_KIND+
[cols="3*", options="header"]
|===
     ^| KEY                        2+^| MAP ENTRIES

.2+^.^| "News", ["id"], ["1234-5678"] | id       | "1234-5678"
                                      | title    | "On the merits of NoSQL" 
|===
====

As you can see, the table name is not part of the key for +CACHE_PER_TYPE+.
In the rest of this section we will no longer show the +CACHE_PER_KIND+ strategy.

.Rename field and collection using @Table and @Column
====
[source, JAVA]
----
@Entity
@Table(name = "Article")
public class News {

    @Id
    private String id;

    @Column(name = "headline")
    private String title;

    // getters, setters ...
}
----

.Content of the +Article+ cache
[cols="3*", options="header"]
|===
     ^| KEY                               2+^| MAP ENTRIES

.2+^.^| ["id"], ["1234-5678"]                | id       | "1234-5678"
                                             | headline | "On the merits of NoSQL" 
|===
====

===== Embedded objects and collections

.Embedded object
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;
    private String title;

    @Embedded
    private NewsPaper paper;

    // getters, setters ...
}

@Embeddable
public class NewsPaper {

    private String name;
    private String owner;

    // getters, setters ...
}
----

.Content of the +News+ cache
[cols="3*", options="header"]
|===
     ^| KEY                               2+^| MAP ENTRIES

.4+^.^| ["id"], ["1234-5678"]                | id          | "1234-5678"
                                             | title       | "On the merits of NoSQL" 
                                             | paper.name  | "NoSQL journal of prophecies" 
                                             | paper.owner | "Delphy" 
|===
====

.@ElementCollection with one attribute
====
[source, JAVA]
----
@Entity
public class GrandMother {

    @Id
    private String id;

    @ElementCollection
    private List<GrandChild> grandChildren = new ArrayList<GrandChild>();

    // getters, setters ...
}

@Embeddable
public class GrandChild {

    private String name;

    // getters, setters ...
}
----

.Content of the +GrandMother+ cache
[cols="3*", options="header"]
|===
     ^| KEY                            2+^| MAP ENTRIES
   ^.^| ["id"], ["granny"]                | id          | "granny"
|===

.Content of the +associations_GrandMother_grandChildren+ cache in +CACHE_PER_TYPE+
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| ROW MAP ENTRIES

.4+^.^| ["GrandMother_id"], ["granny"]
.2+^.^| ["GrandMother_id", "name"], ["granny", "Leia"]
      | GrandMother_id
      | "granny"

      | name
      | "Leia"

.2+^.^| ["GrandMother_id", "name"], ["granny", "Luke"]
      | GrandMother_id
      | "granny"

      | name
      | "Luke"
|===

.Content of the +ASSOCIATIONS+ cache in +CACHE_PER_KIND+
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| ROW MAP ENTRIES

.4+^.^| "GrandMother_grandChildren", ["GrandMother_id"], ["granny"]
.2+^.^| ["GrandMother_id", "name"], ["granny", "Leia"]
      | GrandMother_id
      | "granny"

      | name
      | "Leia"

.2+^.^| ["GrandMother_id", "name"], ["granny", "Luke"]
      | GrandMother_id
      | "granny"

      | name
      | "Luke"
|===
====

Here, we see that the collection of elements is stored in a separate cache and entry.
The association key is made of:

* the foreign key column names pointing to the owner of this association
* the foreign key column values pointing to the owner of this association
* the association table name in the +CACHE_PER_KIND+ approach where all associations share the same cache

The association entry is a map containing the representation of each entry in the collection.
The keys of that map are made of:

* the names of the columns uniquely identifying that specific collection entry
  (e.g. for a +Set+ this is all of the columns)
* the values of the columns uniquely identifying that specific collection entry

The value attack to that collection entry key is a Map containing the key value pairs column name / column value.

.@ElementCollection with @OrderColumn
====
[source, JAVA]
----
@Entity
public class GrandMother {

    @Id
    private String id;

    @ElementCollection
    @OrderColumn( name = "birth_order" )
    private List<GrandChild> grandChildren = new ArrayList<GrandChild>();

    // getters, setters ...
}

@Embeddable
public class GrandChild {

    private String name;

    // getters, setters ...
}
----

.Content of the +GrandMother+ cache
[cols="3*", options="header"]
|===
     ^| KEY                            2+^| MAP ENTRIES
   ^.^| ["id"], ["granny"]                | id          | "granny"
|===

.Content of the +GrandMother_grandChildren+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| ROW MAP ENTRIES

.6+^.^| ["GrandMother_id"], ["granny"]
.3+^.^| ["GrandMother_id", "birth_order"], ["granny", 0]
      | GrandMother_id
      | "granny"

      | birth_order
      | 0

      | name
      | "Leia"

.3+^.^| ["GrandMother_id", "birth_order"], ["granny", 1]
      | GrandMother_id
      | "granny"

      | birth_order
      | 1

      | name
      | "Luke"
|===
====

Here we used an indexed collection and to identify the entry in the collection,
only the owning entity id and the index value is enough.

==== Associations

Associations between entities are mapped like (collection of) embeddables 
except that the target entity is represented by its identifier(s).


.Unidirectional one-to-one
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}

@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    private Vehicule vehicule;

    // getters, setters ...
}
----

.Content of the +Vehicule+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| ["id"], ["V_01"]             | id             | "V_01"
                                     | brand          | "Mercedes"
|===

.Content of the +Wheel+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.3+^.^| ["id"], ["W001"]             | id             | "W001"
                                     | diameter       | 0.0
                                     | vehicule_id    | "V_01"
|===
====

[[ehcache-in-entity-one-to-one-join-column]]
.Unidirectional one-to-one with @JoinColumn
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}


@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    @JoinColumn( name = "part_of" )
    private Vehicule vehicule;

    // getters, setters ...
}
----

.Content of the +Vehicle+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| ["id"], ["V_01"]             | id             | "V_01"
                                     | brand          | "Mercedes"
|===

.Content of the +Wheel+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.3+^.^| "Wheel", ["id"], ["W001"]    | id             | "W001"
                                     | diameter       | 0.0
                                     | part_of       | "V_01"
|===
====

.Unidirectional one-to-one with @MapsId and @PrimaryKeyJoinColumn
====
[source, JAVA]
----
@Entity
public class Vehicule {

    @Id
    private String id;
    private String brand;

    // getters, setters ...
}

@Entity
public class Wheel {

    @Id
    private String id;
    private double diameter;

    @OneToOne
    @PrimaryKeyJoinColumn
    @MapsId
    private Vehicule vehicule;

    // getters, setters ...
}
----

.Content of the +Vehicle+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                2+^| MAP ENTRIES

.2+^.^| ["id"], ["V_01"]                      | id             | "V_01"
                                              | brand          | "Mercedes"
|===

.Content of the +Wheel+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                2+^| MAP ENTRIES

.2+^.^| ["vehicule_id"], ["V_01"]             | vehicule_id    | "V_01"
                                              | diameter       | 0.0
|===
====

.Bidirectional one-to-one
====
[source, JAVA]
----
@Entity
public class Husband {

    @Id
    private String id;
    private String name;

    @OneToOne
    private Wife wife;

    // getters, setters ...
}

@Entity
public class Wife {

    @Id
    private String id;
    private String name;

    @OneToOne(mappedBy="wife")
    private Husband husband;

    // getters, setters ...
}
----

.Content of the +Husband+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES
.3+^.^| ["id"], ["alex"]             | id             | "alex"
                                     | name           | "Alex"
                                     | wife           | "bea"
|===

.Content of the +Wife+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES
.2+^.^| ["id"], ["bea"]              | id             | "bea"
                                     | name           | "Bea"
|===

.Content of the +associations_Husband+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.2+^.^| ["wife"], ["bea"]
.2+^.^| ["id", "wife"], ["alex", "bea"]
      | id
      | "alex"

      | wife
      | "bea"
|===
====

.Unidirectional one-to-many
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

.Content of the +Basket+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| ["id"], ["davide_basket"]           | id               | "davide_basket"
                                            | owner            | "Davide"
|===

.Content of the +Product+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES
.2+^.^| ["name"], ["Beer"]                  | name             | "Beer"
                                            | description      | "Tactical Nuclear Penguin"

.2+^.^| ["name"], ["Pretzel"]               | name             | "Pretzel"
                                            | description      | "Glutino Pretzel Sticks"
|===

.Content of the +associations_Basket_Product+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.4+^.^| ["Basket_id"], ["davide_basket"]
.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Beer"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Beer"

.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Pretzel"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Pretzel"


|===
====

.Unidirectional one-to-many with +@JoinTable+
====
[source, JAVA]
----
@Entity
public class Basket {

    @Id
    private String id;

    private String owner;

    @OneToMany
    @JoinTable( name = "BasketContent" )
    private List<Product> products = new ArrayList<Product>();

    // getters, setters ...
}

@Entity
public class Product {

    @Id
    private String name;

    private String description;

    // getters, setters ...
}
----

.Content of the +Basket+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES

.2+^.^| ["id"], ["davide_basket"]           | id               | "davide_basket"
                                            | owner            | "Davide"
|===

.Content of the +Basket+ cache
[cols="3*", options="header"]
|===
     ^| KEY                       2+^| MAP ENTRIES
.2+^.^| ["name"], ["Beer"]                  | name             | "Beer"
                                            | description      | "Tactical Nuclear Penguin"

.2+^.^| ["name"], ["Pretzel"]               | name             | "Pretzel"
                                            | description      | "Glutino Pretzel Sticks"
|===

.Content of the +associations_BasketContent+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.4+^.^| ["Basket_id"], ["davide_basket"]
.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Beer"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Beer"

.2+^.^| ["Basket_id", "products_name"], ["davide_basket", "Pretzel"]
      | Basket_id
      | "davide_basket"

      | products_name
      | "Pretzel"
|===
====

.Unidirectional one-to-many using maps with defaults
====
[source, JAVA]
----
@Entity
public class User {

    @Id
    private String id;

    @OneToMany
    private Map<String, Address> addresses = new HashMap<String, Address>();

    // getters, setters ...
}

@Entity
public class Address {

    @Id
    private String id;
    private String city;

    // getters, setters ...
}
----

.Content of the +User+ cache
[cols="3*", options="header"]
|===
     ^| KEY                             2+^| MAP ENTRIES

   ^.^| ["id"], ["user_001"]               | id   | "user_001"
|===

.Content of the +Address+ cache
[cols="3*", options="header"]
|===
     ^| KEY                             2+^| MAP ENTRIES
.2+^.^| ["id"], ["address_001"]            | id   | "address_001"
                                           | city | "Rome"

.2+^.^| ["id"], ["address_002"]            | id   | "address_002"
                                           | city | "Paris"
|===


.Content of the +associations_User_address+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.6+^.^| ["User_id"], "user_001"]
.3+^.^| ["User_id", "addresses_KEY"], ["user_001", "home"]
      | User_id
      | "user_001"

      | addresses_KEY
      | "home"

      | addresses_id
      | "address_001"


.3+^.^| ["User_id", "addresses_KEY"], ["user_001", "work"]
      | User_id
      | "user_002"

      | addresses_KEY
      | "work"

      | addresses_id
      | "address_002"
|===
====

.Unidirectional one-to-many using maps with @MapKeyColumn
====
[source, JAVA]
----
@Entity
public class User {

    @Id
    private String id;

    @OneToMany
    @MapKeyColumn(name = "addressType")
    private Map<String, Address> addresses = new HashMap<String, Address>();

    // getters, setters ...
}

@Entity
public class Address {

    @Id
    private String id;
    private String city;

    // getters, setters ...
}
----

.Content of the +User+ cache
[cols="3*", options="header"]
|===
     ^| KEY                             2+^| MAP ENTRIES

   ^.^| ["id"], ["user_001"]               | id   | "user_001"
|===

.Content of the +Address+ cache
[cols="3*", options="header"]
|===
     ^| KEY                             2+^| MAP ENTRIES
.2+^.^| ["id"], ["address_001"]            | id   | "address_001"
                                           | city | "Rome"

.2+^.^| ["id"], ["address_002"]            | id   | "address_002"
                                           | city | "Paris"
|===

.Content of the +associations_User_address+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.6+^.^| ["User_id"], "user_001"]
.3+^.^| ["User_id", "addressType"], ["user_001", "home"]
      | User_id
      | "user_001"

      | addressesType
      | "home"

      | addresses_id
      | "address_001"


.3+^.^| ["User_id", "addressType"], ["user_001", "work"]
      | User_id
      | "user_002"

      | addressesType
      | "work"

      | addresses_id
      | "address_002"
|===
====

.Unidirectional many-to-one
====
[source, JAVA]
----
@Entity
public class JavaUserGroup {

    @Id
    private String jugId;
    private String name;

    // getters, setters ...
}

@Entity
public class Member {

    @Id
    private String id;
    private String name;

    @ManyToOne
    private JavaUserGroup memberOf;

    // getters, setters ...
}
----

.Content of the +JavaUserGroup+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES

.2+^.^| ["jugId"], ["summer_camp"]                  | jugId           | "summer_camp"
                                                    | name            | "JUG Summer Camp"
|===

.Content of the +Member+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES
.3+^.^| ["member_id"], ["emmanuel"]                 | member_id       | "emmanuel"
                                                    | name            | "Emmanuel Bernard"
                                                    | memberOf_jug_id | "summer_camp"

.3+^.^| ["member_id"], ["jerome"]                   | member_id       | "jerome"
                                                    | name            | "Jerome"
                                                    | memberOf_jug_id | "summer_camp"
|===
====

.Bidirectional many-to-one 
====
[source, JAVA]
----
@Entity
public class SalesForce {

    @Id
    private String id;
    private String corporation;

    @OneToMany(mappedBy = "salesForce")
    private Set<SalesGuy> salesGuys = new HashSet<SalesGuy>();

    // getters, setters ...
}

@Entity
public class SalesGuy {
    private String id;
    private String name;

    @ManyToOne
    private SalesForce salesForce;

    // getters, setters ...
}
----

.Content of the +SalesForce+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES

.2+^.^| ["id"], ["red_hat"]                         | id              | "red_hat"
                                                    | corporation     | "Red Hat"
|===

.Content of the +SalesGuy+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES
.3+^.^| ["id"], ["eric"]                            | id              | "eric"
                                                    | name            | "Eric"
                                                    | salesForce_id   | "red_hat"

.3+^.^| ["id"], ["simon"]                           | id              | "simon"
                                                    | name            | "Simon"
                                                    | salesForce_id   | "red_hat"
|===

.Content of the +associations_SalesGuy+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.4+^.^| ["salesForce_id"], ["red_hat"]
.2+^.^| ["salesForce_id", "id"], ["red_hat", "eric"]
      | salesForce_id
      | "red_hat"

      | id
      | "eric"

.2+^.^| ["salesForce_id", "id"], ["red_hat", "simon"]
      | salesForce_id
      | "red_hat"

      | id
      | "simon"
|===
====

.Unidirectional many-to-many
====
[source, JAVA]
----
@Entity
public class Student {

    @Id
    private String id;
    private String name;

    // getters, setters ...
}

@Entity
public class ClassRoom {

    @Id
    private long id;
    private String lesson;

    @ManyToMany
    private List<Student> students = new ArrayList<Student>();

    // getters, setters ...
}
----

The "Math" class has 2 students: John Doe and Mario Rossi

The "English" class has 2 students: Kate Doe and Mario Rossi

.Content of the +ClassRoom+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES

.2+^.^| ["id"], [1]                    | id         | 1 
                                       | name       | "Math"

.2+^.^| ["id"], [2]                    | id         | 2 
                                       | name       | "English"
|===

.Content of the +Student+ cache
[cols="3*", options="header"]
|===
     ^| KEY                                      2+^| MAP ENTRIES
.2+^.^| ["id"], ["john"]               | id         | "john"
                                       | name       | "John Doe"

.2+^.^| ["id"], ["mario"]              | id         | "mario"
                                       | name       | "Mario Rossi"

.2+^.^| ["id"], ["kate"]               | id         | "kate"
                                       | name       | "Kate Doe"
|===

.Content of the +associations_ClassRoom_Student+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.4+^.^| ["ClassRoom_id"], [1]
.2+^.^| ["ClassRoom_id", "students_id"], [1, "mario"]
      | ClassRoom_id
      | 1 

      | students_id
      | "mario"

.2+^.^| ["ClassRoom_id", "students_id"], [1, "john"]
      | ClassRoom_id
      | 1 

      | students_id
      | "john"

.4+^.^| ["ClassRoom_id"], [2]
.2+^.^| ["ClassRoom_id", "students_id"], [2, "kate"]
      | ClassRoom_id
      | 2 

      | students_id
      | "kate"

.2+^.^| ["ClassRoom_id", "students_id"], [2, "mario"]
      | ClassRoom_id
      | 2 

      | students_id
      | "mario"
|===
====

.Bidirectional many-to-many 
====
[source, JAVA]
----
@Entity
public class AccountOwner {

    @Id
    private String id;

    private String SSN;

    @ManyToMany
    private Set<BankAccount> bankAccounts;

    // getters, setters ...
}

@Entity
public class BankAccount {

    @Id
    private String id;

    private String accountNumber;

    @ManyToMany( mappedBy = "bankAccounts" )
    private Set<AccountOwner> owners = new HashSet<AccountOwner>();

    // getters, setters ...
}
----

David owns 2 accounts: "012345" and "ZZZ-009"

.Content of the +AccountOwner+ cache
[cols="3*", options="header"]
|===
     ^| KEY                               2+^| MAP ENTRIES

.2+^.^| ["id"], ["David"]                    | id            | "David"
                                             | SSN           | "0123456"
|===

.Content of the +BankAccount+ cache
[cols="3*", options="header"]
|===
     ^| KEY                               2+^| MAP ENTRIES
.2+^.^| ["id"], ["account_1"]                | id            | "account_1"
                                             | accountNumber | "X2345000"

.2+^.^| ["id"], ["account_2"]                | id            | "account_2"
                                             | accountNumber | "ZZZ-009"
|===

.Content of the +AccountOwner_BankAccount+ cache
[cols="4*", options="header"]
|===
     ^| KEY
     ^| ROW KEY
   2+^| MAP ENTRIES

.2+^.^| ["bankAccounts_id"], ["account_1"]
.2+^.^| ["bankAccounts_id", "owners_id"], ["account_1", "David"]
      | bankAccounts_id
      | "account_1"

      | owners_id
      | "David"

.2+^.^| ["bankAccounts_id"], ["account_2"]
.2+^.^| ["bankAccounts_id", "owners_id"], ["account_2", "David"]
      | bankAccounts_id
      | "account_2"

      | owners_id
      | "David"

.4+^.^| ["owners_id"], ["David"]
.2+^.^| ["owners_id", "banksAccounts_id"], ["David", "account_1"]
      | bankAccounts_id
      | "account_1"

      | owners_id
      | "David"

.2+^.^| ["owners_id", "banksAccounts_id"], ["David", "account_2"]
      | bankAccounts_id
      | "account_2"

      | owners_id
      | "David"

|===
====

[[ogm-ehcache-transactions]]

=== Transactions

While Ehcache technically supports transactions,
Hibernate OGM is currently unable to use them. Careful!

If you need this feature, it should be easy to implement:
contributions welcome! See
https://hibernate.onjira.com/browse/OGM-243[JIRA OGM-243].
