[[ogm-mongodb]]

=== MongoDB

http://www.mongodb.org[MongoDB] is a document oriented datastore
written in C++ with strong emphasis on ease of use.

==== Configuring MongoDB

This implementation is based upon the MongoDB Java driver.
The currently supported version is {mongodb-version}.

The following properties are available to configure MongoDB support:

.MongoDB datastore configuration properties
hibernate.ogm.datastore.provider::
To use MongoDB as a datastore provider, this property must be set to +mongodb+
hibernate.ogm.option.configurator::
The fully-qualified class name or an instance of a programmatic option configurator (see <<ogm-mongodb-programmatic-configuration>>)
hibernate.ogm.datastore.host::
The hostname of the MongoDB instance. The default value is +127.0.0.1+.
hibernate.ogm.datastore.port::
The port used by the MongoDB instance. The default value is +27017+.
hibernate.ogm.datastore.database::
The database to connect to. This property has no default value.
hibernate.ogm.datastore.username::
The username used when connecting to the MongoDB server.
This property has no default value.
hibernate.ogm.datastore.password::
The password used to connect to the MongoDB server.
This property has no default value.
This property is ignored if the username isn't specified.
hibernate.ogm.mongodb.connection_timeout::
Defines the timeout used by the driver
when the connection to the MongoDB instance is initiated.
This configuration is expressed in milliseconds.
The default value is +5000+.
hibernate.ogm.datastore.document.association_storage::
Defines the way OGM stores association information in MongoDB.
The following two strategies exist (values of the +org.hibernate.ogm.datastore.document.options.AssociationStorageType+ enum):
+IN_ENTITY+ (store association information within the entity) and
+ASSOCIATION_DOCUMENT+ (store association information in a dedicated document per association).
+IN_ENTITY+ is the default and recommended option
unless the association navigation data is much bigger than the core of the document and leads to performance degradation.
hibernate.ogm.mongodb.association_document_storage::
Defines how to store assocation documents (applies only if the +ASSOCIATION_DOCUMENT+
association storage strategy is used).
Possible strategies are (values of the +org.hibernate.ogm.datastore.mongodb.options.AssociationDocumentType+ enum):
* +GLOBAL_COLLECTION+ (default): stores the association information in a unique MongoDB collection for all associations
* +COLLECTION_PER_ASSOCIATION+ stores the association in a dedicated MongoDB collection per association
hibernate.ogm.mongodb.write_concern::
Defines the write concern setting to be applied when issuing writes against the MongoDB datastore.
Possible settings are (values of the +WriteConcernType+ enum):
+ERRORS_IGNORED+, +ACKNOWLEDGED+, +UNACKNOWLEDGED+, +FSYNCED+, +JOURNALED+, +REPLICA_ACKNOWLEDGED+, +MAJORITY+ and +CUSTOM+.
When set to +CUSTOM+, a custom +WriteConcern+ implementation type has to be specified.
hibernate.ogm.mongodb.write_concern_type::
Specifies a custom +WriteConcern+ implementation type (fully-qualified name, class object or instance).
This is useful in cases where the pre-defined configurations are not sufficient,
e.g. if you want to ensure that writes are propagated to a specific number of replicas or given "tag set".
Only takes effect if +hibernate.ogm.mongodb.write_concern+ is set to +CUSTOM+.
hibernate.ogm.mongodb.read_preference::
Specifies the +ReadPreference+ to be applied when issuing reads against the MongoDB datastore.
Possible settings are (values of the +ReadPreferenceType+ enum):
+PRIMARY+, +PRIMARY_PREFERRED+, +SECONDARY+, +SECONDARY_PREFERRED+ and +NEAREST+.
It's currently not possible to plug in custom read preference types.
If you're interested in such a feature, please let us know.

For more information, please refer to the
http://api.mongodb.org/java/current/com/mongodb/WriteConcern.html[official documentation].
This option is case insensitive and the default value is +ACKNOWLEDGED+.

[NOTE]
====
When bootstrapping a session factory or entity manager factory programmatically,
you should use the constants accessible via +MongoDBProperties+
when specifying the configuration properties listed above.
Common properties shared between (document) stores are declared on +OgmProperties+ and +DocumentStoreProperties+, respectively.
To ease migration between stores, it is recommended to reference these constants directly from there.
====

[[ogm-mongodb-annotation-configuration]]
===== Annotation based configuration

Hibernate OGM allows to configure store-specific options via Java annotations.
When working with the MongoDB backend, you can specify the following settings:

* the write concern for entities and associations using the +@WriteConcern+ annotation
* the read preference for entities and associations using the +@ReadPreference+ annotation
* a strategy for storing associations using the +@AssociationStorage+ and +@AssociationDocumentStorage+ annotations
(refer to <<ogm-mongodb-storage-principles>> to learn more about these options).

The following shows an example:

.Configuring the association storage strategy using annotations
====
[source, JAVA]
----
@Entity
@WriteConcern(WriteConcernType.JOURNALED)
@ReadPreference(ReadPreferenceType.PRIMARY_PREFERRED)
@AssociationStorage(AssociationStorageType.ASSOCIATION_DOCUMENT)
@AssociationDocumentStorage(AssociationDocumentType.COLLECTION_PER_ASSOCIATION)
public class Zoo {

    @OneToMany
    private Set<Animal> animals;

    @OneToMany
    private Set<Person> employees;

    @OneToMany
    @AssociationStorage(AssociationStorageType.IN_ENTITY)
    private Set<Person> visitors;

    //...
}
----
====

The +@WriteConcern+ annotation on the entity level expresses that all writes should be done using the +JOURNALED+ setting.
Similarly, the +@ReadPreference+ annotation advices the engine to preferably read that entity from the primary node if possible.
The other two annotations on the type-level specify that all associations of the +Zoo+
class should be stored in separate assocation documents, using a dedicated collection per association.
This setting applies to the +animals+ and +employees+ associations.
Only the elements of the +visitors+ association will be stored in the document of the corresponding +Zoo+ entity
as per the configuration of that specific property which takes precedence over the entity-level configuration.

[[ogm-mongodb-programmatic-configuration]]
===== Programmatic configuration

In addition to the annotation mechanism,
Hibernate OGM also provides a programmatic API for applying store-specific configuration options.
This can be useful if you can't modify certain entity types or
don't want to add store-specific configuration annotations to them.
The API allows set options in a type-safe fashion on the global, entity and property levels.

When working with MongoDB, you can currently configure the following options using the API:

* write concern
* read preference
* association storage strategy
* association document storage strategy

To set these options via the API, you need to create an +OptionConfigurator+ implementation
as shown in the following example:

.Example of an option configurator
====
[source, JAVA]
----
public class MyOptionConfigurator extends OptionConfigurator {

    @Override
    public void configure(Configurable configurable) {
        configurable.configureOptionsFor( MongoDB.class )
            .writeConcern( WriteConcernType.REPLICA_ACKNOWLEDGED )
            .readPreference( ReadPreferenceType.NEAREST )
            .entity( Zoo.class )
                .associationStorage( AssociationStorageType.ASSOCIATION_DOCUMENT )
                .associationDocumentStorage( AssociationDocumentType.COLLECTION_PER_ASSOCIATION )
                .property( "animals", ElementType.FIELD )
                    .associationStorage( AssociationStorageType.IN_ENTITY )
            .entity( Animal.class )
                .writeConcern( new RequiringReplicaCountOf( 3 ) )
                .associationStorage( AssociationStorageType.ASSOCIATION_DOCUMENT );
    }
}
----
====

The call to +configureOptionsFor()+, passing the store-specific identifier type +MongoDB+,
provides the entry point into the API. Following the fluent API pattern, you then can configure
global options (+writeConcern()+, +readPreference()+) and navigate to single entities or properties to apply options
specific to these (+associationStorage()+ etc.).
The call to +writeConcern()+  for the +Animal+  entity shows how a specific write concern type can be used.
Here +RequiringReplicaCountOf+ is a custom implementation of +WriteConcern+ which ensures
that writes are propagated to a given number of replicas before a write is acknowledged.

Options given on the property level precede entity-level options. So e.g. the +animals+ association of the +Zoo+
class would be stored using the in-entity strategy, while all other associations of the +Zoo+ entity would
be stored using separate association documents.

Similarly, entity-level options take precedence over options given on the global level.
Global-level options specified via the API complement the settings given via configuration properties.
In case a setting is given via a configuration property and the API at the same time,
the latter takes precedence.

Note that for a given level (property, entity, global),
an option set via annotations is overridden by the same option set programmatically.
This allows you to change settings in a more flexible way if required.

To register an option configurator, specify its class name using the +hibernate.ogm.option.configurator+ property.
When bootstrapping a session factory or entity manager factory programmatically,
you also can pass in an +OptionConfigurator+ instance or the class object representing the configurator type.


[[ogm-mongodb-storage-principles]]
==== Storage principles

Hibernate OGM tries to make the mapping to the underlying datastore as natural as possible
so that third party applications not using Hibernate OGM can still read
and update the same datastore.
We worked particularly hard on the MongoDB model
to offer various classic mappings between your object model
and the MongoDB documents.

===== Entities

Entities are stored as MongoDB documents and not as BLOBs
which means each entity property will be translated into a document field.
You can use the name property of the [classname]+@Table+ and [classname]+@Column+ annotations
to rename the collections and the document's fields if you need to.

Note that embedded objects are mapped as nested documents.

.Example of an entity with an embedded object
====
[source, JAVA]
----
@Entity
public class News {
    @Id
    private String id;
    private String title;
    @Column(name="desc")
    private String description;
    @Embedded
    private NewsPaper paper;

    //getters, setters ...
}

@Embeddable
public class NewsPaper {
    private String name;
    private String owner;
    //getters, setters ...
}
----

[source, JSON]
----
{
    "_id" : "1234-5678-0123-4567",
    "title": "On the merits of NoSQL",
    "desc": "This paper discuss why NoSQL will save the world for good",
    "paper": {
        "name": "NoSQL journal of prophecies",
        "owner": "Delphy"
    }
}
----
====

====== Identifiers

The +_id+ field of a MongoDB document is directly used
to store the identifier columns mapped in the entities.
You can use simple identifiers (e.g. of type +long+ with a table-based id generator or of type +String+ with a GUID generator)
as well as embedded identifiers.

Generally, it is recommended though to work with MongoDB's object id data type.
This will facilitate the integration with other applications possibly expecting that common MongoDB id type.
To do so, you have two options:

* Define your id property as +String+ and annotate it with +@Type(type="objectid")+
* Define your id property as +org.bson.types.ObjectId+

In both cases the id will be stored as native +ObjectId+ in the datastore.

You can assign id values yourself or (preferably) take advantage of the +IDENTITY+ generation strategy
which will automatically assign an id during insert. The following shows an example:

.Mapping id as object id in MongoDB
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Type(type = "objectid")
    private String id;
    private String title;

    //getters, setters ...
}
----

[source, JSON]
----
{
    "_id" : ObjectId("5425448830048b67064d40b1"),
    "title" : "Exciting News"
}
----
====

[NOTE]
====
You also can use +GenerationType.AUTO+ to store ids as object id in MongoDB.
This requires though the property +hibernate.id.new_generator_mappings+ to be set to +false+.
====

Embedded identifiers are stored as embedded document within the +_id+ field.
Hibernate OGM will convert the +@Id+ property into a +_id+ document field
so you can name the entity id like you want it will always be stored into +_id+
(the recommended approach in MongoDB).
That means in particular that MongoDB will automatically index your _id fields.
Let's look at an example:

.Example of an entity using Embedded id
====
[source, JAVA]
----
@Entity
public class News {

    @EmbeddedId
    private NewsID newsId;
    //getters, setters ...
}

@Embeddable
public class NewsID implements Serializable {

    private String title;
    private String author;
    //getters, setters ...
}
----

[source, JSON]
----
{
    "_id" :{
        "title": "How does Hibernate OGM MongoDB work?",
        "author": "Guillaume"
    }
}
----
====

===== Associations

Hibernate OGM MongoDB proposes three strategies to store navigation information for associations.
To switch between these strategies,
either use the +@AssocationStorage+ and +@AssociationDocumentStorage+ annotations (see <<ogm-mongodb-annotation-configuration>>),
the API for programmatic configuration (see <<ogm-mongodb-programmatic-configuration>>) or
specify a default strategy via the +hibernate.ogm.datastore.document.association_storage+ and
+hibernate.ogm.mongodb.association_document_storage+ configuration properties.

The three possible strategies are:

* IN_ENTITY (default)
* ASSOCIATION_DOCUMENT, using a global collection for all associations
* ASSOCIATION_DOCUMENT, using a dedicated collection for each association

====== In Entity strategy

In this strategy, Hibernate OGM directly stores the id(s)
of the other side of the association
into a field or an embedded document
depending if the mapping concerns a single object or a collection.
The field that stores the relationship information is named like the entity property.

.Java entity
====
[source, JAVA]
----
@Entity
public class AccountOwner {

    @Id
    private String id;

    @ManyToMany
    public Set<BankAccount> bankAccounts;

    //getters, setters, ...
}
----
====

.JSON representation
====
[source, JSON]
----
{
    "_id" : "owner0001",
    "bankAccounts" : [
        "accountABC",
        "accountXYZ"
    ]
}
----
====

====== Global collection strategy

With this strategy, Hibernate OGM creates a single collection
in which it will store all navigation information for all associations.
Each document of this collection is structure in 2 parts.
The first is the +_id+ field which contains the identifier information
of the association owner and the name of the association table.
The second part is the +rows+ field which stores (into an embedded collection) all ids
that the current instance is related to.

.Unidirectional relationship
====
[source, JSON]
----
{
    "_id": {
        "owners_id": "owner0001",
        "table": "AccountOwner_BankAccount"
    },
    "rows": [
        "accountABC",
        "accountXYZ"
    ]
}
----
====

For a bidirectional relationship, another document is created where ids are reversed.
Don't worry, Hibernate OGM takes care of keeping them in sync:

.Bidirectional relationship
====
[source, JSON]
----
{
    "_id": {
        "owners_id": "owner0001",
        "table": "AccountOwner_BankAccount"
    },
    "rows": [
        "accountABC",
        "accountXYZ"
        ]
}
{
    "_id": {
        "bankAccounts_id": "accountXYZ",
        "table": "AccountOwner_BankAccount"
    },
    "rows": [
        "owner0001"
    ]
}
----
====

====== One collection per association strategy

In this strategy, Hibernate OGM creates a MongoDB collection per association
in which it will store all navigation information for that particular association.
This is the strategy closest to the relational model.
If an entity A is related to B and C, 2 collections will be created.
The name of this collection is made of the association table concatenated with +associations_+.
For example, if the [classname]+BankAccount+ and [classname]+Owner+ are related,
the collection used to store will be named +associations_Owner_BankAccount+.
The prefix is useful to quickly identify the association collections from the entity collections.
Each document of an association collection has the following structure:

* +_id+ contains the id of the owner of relationship
* +rows+ contains all the id of the related entities

.Unidirectional relationship
====
[source, JSON]
----
{
    "_id" : { "owners_id" : "owner0001" },
    "rows" : [
        "accountABC",
        "accountXYZ"
    ]
}
----
====

.Bidirectional relationship
====
[source, JSON]
----
{
    "_id" : { "owners_id" : "owner0001" },
    "rows" : [
        "accountABC",
        "accountXYZ"
    ]
}
{
    "_id" : { "bankAccounts_id" : "accountXYZ" },
    "rows" : [
        "owner0001"
    ]
}
----
====

==== Transactions

MongoDB does not support transactions.
Only changes applied to the same document are done atomically.
A change applied to more than one document will not be applied atomically.
This problem is slightly mitigated by the fact that Hibernate OGM queues all changes
before applying them during flush time.
So the window of time used to write to MongoDB is smaller than what you would have done manually.

We recommend that you still use transaction demarcations with Hibernate OGM
to trigger the flush operation transparently (on commit).
But do not consider rollback as a possibility, this won't work.

[[ogm-mongodb-queries]]
==== Queries

You can express queries in a few different ways:

* using JP-QL
* using a native MongoQL query
* using a Hibernate Search query (brings advanced full-text and geospatial queries)

[NOTE]
====
In order to reflect changes performed in the current session,
all entities affected by a given query are flushed to the datastore prior to query execution
(that's the case for Hibernate ORM as well as Hibernate OGM).

For not fully transactional stores such as MongoDB
this can cause changes to be written as a side-effect of running queries
which cannot be reverted by a possible later rollback.

Depending on your specific use cases and requirements you may prefer to disable auto-flushing,
e.g. by invoking +query.setFlushMode( FlushMode.MANUAL )+.
Bear in mind though that query results will then not reflect changes applied within the current session.
====

===== JP-QL queries

Hibernate OGM is a work in progress, so only a sub-set of JP-QL constructs is available
when using the JP-QL query support. This includes:

* simple comparisons using "<", "<=", "=", ">=" and ">"
* +IS NULL+ and +IS NOT NULL+
* the boolean operators +AND+, +OR+, +NOT+
* +LIKE+, +IN+ and +BETWEEN+
* +ORDER BY+

Queries using these constructs will be transformed into equivalent native MongoDB queries.

===== Native MongoDB queries

Hibernate OGM also supports certain forms of native queries for MongoDB.
Currently two forms of native queries are available via the MongoDB backend:

* find queries specifying the search criteria only
* queries specified using the MongoDB CLI syntax

The former always maps results to entity types.
The latter either maps results to entity types or to certain supported forms of projection.
Note that parameterized queries are not supported by MongoDB, so don't expect +Query#setParameter()+ to work.

[WARNING]
====
Specifying native MongoDB queries using the CLI syntax is an EXPERIMENTAL feature for the time being.
Currently only +find()+ and +count()+ queries are supported via the CLI syntax.
Further query types (including updating queries) may be supported in future revisions.

No cursor operations such as +sort()+ are supported.
Instead use the corresponding MongoDB http://docs.mongodb.org/manual/reference/operator/query-modifier/[query modifiers]
such as +$orderby+ within the criteria parameter.

JSON parameters passed via the CLI syntax must be specified using the http://docs.mongodb.org/manual/reference/mongodb-extended-json/[strict mode]
The only relaxation of this is that single quotes may be used when specifying attribute names/values to facilitate embedding
queries within Java strings.

Note that results of projections are returned as retrieved from the MongoDB driver at the moment and
are not (yet) converted using suitable Hibernate OGM type implementations.
====

You can execute native queries as shown in the following example:

.Using the JPA API
====
[source, JAVA]
----
@Entity
public class Poem {

    @Id
    private Long id;

    private String name;

    private String author;

   // getters, setters ...

}

...

javax.persistence.EntityManager em = ...

// criteria-only find syntax
String query1 = "{ $and: [ { name : 'Portia' }, { author : 'Oscar Wilde' } ] }";
Poem poem = (Poem) em.createNativeQuery( query1, Poem.class ).getSingleResult();

// criteria-only find syntax with order-by
String query2 = "{ $query : { author : 'Oscar Wilde' }, $orderby : { name : 1 } }";
List<Poem> poems = em.createNativeQuery( query2, Poem.class ).getResultList();

// projection via CLI-syntax
String query3 = "db.WILDE_POEM.find(" +
    "{ '$query' : { 'name' : 'Athanasia' }, '$orderby' : { 'name' : 1 } }" +
    "{ 'name' : 1 }" +
    ")";

// will contain name and id as MongoDB always returns the id for projections
List<Object[]> poemNames = (List<Object[]>)em.createNativeQuery( query3 ).getResultList();

// projection via CLI-syntax
String query4 = "db.WILDE_POEM.count({ 'name' : 'Athanasia' })";

Object[] count = (Object[])em.createNativeQuery( query4 ).getSingleResult();
----
====

The result of a query is a managed entity (or a list thereof) or a projection of attributes in form of an object array,
just like you would get from a JP-QL query.

.Using the Hibernate native API
====
[source, JAVA]
----
OgmSession session = ...

String query1 = "{ $and: [ { name : 'Portia' }, { author : 'Oscar Wilde' } ] }";
Poem poem = session.createNativeQuery( query1 )
                      .addEntity( "Poem", Poem.class )
                      .uniqueResult();

String query2 = "{ $query : { author : 'Oscar Wilde' }, $orderby : { name : 1 } }";
List<Poem> poems = session.createNativeQuery( query2 )
                      .addEntity( "Poem", Poem.class )
                      .list();
----
====

[NOTE]
====
As +OgmSession+ extends +org.hibernate.Session+ (which originally has been designed with relational databases in mind only)
you could also invoke +createSQLQuery()+ to create a native query. But for the sake of comprehensibility, you should prefer
+createNativeQuery()+, and in fact +createSQLQuery()+ has been deprecated on +OgmSession+.
====

Native queries can also be created using the +@NamedNativeQuery+ annotation:

.Using @NamedNativeQuery
====
[source, JAVA]
----
@Entity
@NamedNativeQuery(
   name = "AthanasiaPoem",
   query = "{ $and: [ { name : 'Athanasia' }, { author : 'Oscar Wilde' } ] }",
   resultClass = Poem.class )
public class Poem { ... }

...

// Using the EntityManager
Poem poem1 = (Poem) em.createNamedQuery( "AthanasiaPoem" )
                     .getSingleResult();

// Using the Session
Poem poem2 = (Poem) session.getNamedQuery( "AthanasiaPoem" )
                     .uniqueResult();
----
====

Hibernate OGM stores data in a natural way so you can still execute queries using the
MongoDB driver, the main drawback is that the results are going to be raw MongoDB
documents and not managed entities.

===== Hibernate Search

You can index your entities using Hibernate Search.
That way, a set of secondary indexes independent of MongoDB is maintained by Hibernate Search
and you can write queries on top of them.
The benefit of this approach is a nice integration at the JPA / Hibernate API level
(managed entities are returned by the queries).
The drawback is that you need to store the Lucene indexes somewhere
(file system, infinispan grid, etc).
Have a look at the Infinispan section (<<ogm-infinispan-indexstorage>>)
for more info on how to use Hibernate Search.
