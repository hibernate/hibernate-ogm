[[ogm-couchdb]]

=== CouchDB

https://couchdb.apache.org/[CouchDB] is a document-oriented datastore
which stores your data in form of JSON documents and exposes its API via HTTP based on REST principles.
It is thus very easy to access from a wide range of languages and applications.

[NOTE]
====
Support for CouchDB is considered an EXPERIMENTAL feature as of this release.
In particular you should be prepared for possible changes to the persistent representation of mapped objects in future releases.
Should you find any bugs or have feature requests for this dialect,
then please open a ticket in the https://hibernate.atlassian.net/browse/OGM[OGM issue tracker].
====

==== Configuring CouchDB

Hibernate OGM uses the excellent https://www.jboss.org/resteasy[RESTEasy] library to talk to CouchDB stores,
so there is no need to include any of the Java client libraries for CouchDB in your classpath.

The following properties are available to configure CouchDB support in Hibernate OGM:

.CouchDB datastore configuration properties
hibernate.ogm.datastore.provider::
To use CouchDB as a datastore provider, this property must be set to +couchdb+
hibernate.ogm.option.configurer::
The fully-qualified class name or an instance of a programmatic option configurer (see <<ogm-couchdb-programmatic-configuration>>)
hibernate.ogm.datastore.host::
The hostname of the CouchDB instance. The default value is +127.0.0.1+.
hibernate.ogm.datastore.port::
The port used by the CouchDB instance. The default value is +5984+.
hibernate.ogm.datastore.database::
The database to connect to. This property has no default value.
hibernate.ogm.datastore.create_database::
Whether to create the specified database in case it does not exist or not.
Can be +true+ or +false+ (default). Note that the specified user must have the right to
create databases if set to +true+.
hibernate.ogm.datastore.username::
The username used when connecting to the CouchDB server.
Note that this user must have the right to create design documents in the chosen database.
This property has no default value.
Hibernate OGM currently does not support accessing CouchDB via HTTPS;
if you're interested in such functionality, let us know.
hibernate.ogm.datastore.password::
The password used to connect to the CouchDB server.
This property has no default value.
This property is ignored if the username isn't specified.
hibernate.ogm.datastore.document.association_storage::
Defines the way OGM stores association information in CouchDB.
The following two strategies exist (values of the +org.hibernate.ogm.options.generic.document.AssociationStorageType+ enum):
+IN_ENTITY+ (store association information within the entity) and
+ASSOCIATION_DOCUMENT+ (store association information in a dedicated document per association).
+IN_ENTITY+ is the default.

[NOTE]
====
When bootstrapping a session factory or entity manager factory programmatically,
you should use the constants declared on +OgmProperties+
when specifying the configuration properties listed above.
====

[[ogm-couchdb-annotation-configuration]]
===== Annotation based configuration

Hibernate OGM allows to configure store-specific options via Java annotations.
When working with the CouchDB backend, you can specify how associations should be stored
using the +AssociationStorage+ annotation
(refer to <<ogm-couchdb-storage-prinicples>> to learn more about association storage strategies in general).

The following shows an example:

.Configuring the association storage strategy using annotations
====
[source, JAVA]
----
@Entity
@AssociationStorage(AssociationStorageType.ASSOCIATION_DOCUMENT)
public class Zoo {

    @OneToMany
    private Set<Animal> animals;

    @OneToMany
    private Set<Person> employees;

    @OneToMany
    @AssociationStorage(AssociationStorageType.IN_ENTITY)
    private Set<Person> visitors;

    //...
}
----
====

The annotation on the entity level expresses that all associations of the +Zoo+
class should be stored in separate assocation documents.
This setting applies to the +animals+ and +employees+ associations.
Only the elements of the +visitors+ association will be stored in the document of the corresponding +Zoo+ entity
as per the configuration of that specific property which takes precedence over the entity-level configuration.

[[ogm-couchdb-programmatic-configuration]]
===== Programmatic configuration

In addition to the annotation mechanism,
Hibernate OGM also provides a programmatic API for applying store-specific configuration options.
This can be useful if you can't modify certain entity types or
don't want to add store-specific configuration annotations to them.
The API allows set options in a type-safe fashion on the global, entity and property levels.

When working with CouchDB, you can currently configure the following options using the API:

* association storage strategy (on the global, entity and property level)

To set this option via the API, you need to create an +OptionConfigurer+ implementation
as shown in the following example:

.Example of an option configurer
====
[source, JAVA]
----
public class MyOptionConfigurer extends OptionConfigurer {

    @Override
    public void configure(Configurable configurable) {
        configurable.configureOptionsFor( CouchDB.class )
            .associationStorage( AssociationStorageType.ASSOCIATION_DOCUMENT )
            .entity( Zoo.class )
                .property( "visitors", ElementType.FIELD )
                    .associationStorage( AssociationStorageType.IN_ENTITY )
            .entity( Animal.class )
                .associationStorage( AssociationStorageType.ASSOCIATION_DOCUMENT );
    }
}
----
====

The call to +configureOptionsFor()+, passing the store-specific identifier type +CouchDB+,
provides the entry point into the API. Following the fluent API pattern, you then can configure
global options and navigate to single entities or properties to apply options specific to these.

Options given on the property level precede entity-level options. So e.g. the +visitors+ association of the +Zoo+
class would be stored using the in-entity strategy, while all other associations of the +Zoo+ entity would
be stored using separate association documents.

Similarly, entity-level options take precedence over options given on the global level.
Global-level options specified via the API complement the settings given via configuration properties.
In case a setting is given via a configuration property and the API at the same time,
the latter takes precedence.

To register an option configurer, specify its name using the +hibernate.ogm.option.configurer+ property.
When bootstrapping a session factory or entity manager factory programmatically,
you also can pass in an +OptionConfigurer+ instance or the class object representing the configurer type.

[[ogm-couchdb-storage-prinicples]]
==== Storage principles

Hibernate OGM tries to make the mapping to the underlying datastore as natural as possible
so that third party applications not using Hibernate OGM can still read
and update the same datastore.
The following describe how entities and associations are mapped to CouchDB documents by Hibernate OGM.

===== Entities

Entities are stored as CouchDB documents and not as BLOBs
which means each entity property will be translated into a document field.
You can use the name property of the [classname]+@Table+ and [classname]+@Column+ annotations
to rename the collections and the document's fields if you need to.

CouchDB provides a built-in mechanism for detecting concurrent updates to one and the same document.
For that purpose each document has an attribute named +_rev+ (for "revision")
which is to be passed back to the store when doing an update.
So when writing back a document and the document's revision has been altered by another writer in parallel,
CouchDB will raise an optimistic locking error
(you could then e.g. re-read the current document version and try another update).

For this mechanism to work, you need to declare a property for the +_rev+ attribute in all your entity types
and mark it with the +@Version+ and +@Generated+ annotations.
The first markes it as a property used for optimistic locking, while the latter advices Hibernate OGM
to refresh that property after writes since its value is managed by the datastore.

[NOTE]
====
Not mapping the +_rev+ attribute may cause lost updates,
as Hibernate OGM needs to re-read the current revision before doing an update in this case.
Thus a warning will be issued during initialization for each entity type which fails to map that property.
====

The following shows an example of an entity and its persistent representation in CouchDB.

.Example of an entity and its representation in CouchDB
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;

    @Version
    @Generated
    @Column(name="_rev")
    private String revision;

    private String title;

    @Column(name="desc")
    private String description;

    //getters, setters ...
}
----

[source, JSON]
----
{
    "_id": "News:id_:news-1_",
    "_rev": "1-d1cd3b00a677a2e31cd0480a796e8480",
    "$type": "entity",
    "$table": "News",
    "title": "On the merits of NoSQL",
    "desc": "This paper discuss why NoSQL will save the world for good"
}
----
====

Note that CouchDB doesn't have a concept of "tables" or "collections" as e.g. MongoDB does;
Instead all documents are stored in one large bucket.
Thus Hibernate OGM needs to add two additional attributes:
+$type+ which contains the type of a document (entity vs. association documents)
and +$table+ which specifies the entity type.

[NOTE]
====
Attributes whose name starts with the "$" character are managed by Hibernate OGM and
thus should not be modified manually.
Also it is not recommended to start the names of your attributes with the "$" character to avoid collisions
with attributes possibly introduced by Hibernate OGM in future releases.
====

Embedded objects are mapped as nested documents.
The following listing shows an example:

.Example of an entity with an embedded object
====
[source, JAVA]
----
@Entity
public class News {

    @Id
    private String id;

    @Version
    @Generated
    @Column(name="_rev")
    private String revision;

    private String title;
    @Column(name="desc")

    private String description;

    @Embedded
    private NewsPaper paper;

    //getters, setters ...
}

@Embeddable
public class NewsPaper {

    private String name;
    private String owner;

    //getters, setters ...
}
----

[source, JSON]
----
{
    "_id": "News:id_:news-1_",
    "_rev": "1-d1cd3b00a677a2e31cd0480a796e8480",
    "$type": "entity",
    "$table": "News",
    "title": "On the merits of NoSQL",
    "desc": "This paper discuss why NoSQL will save the world for good",
    "paper": {
        "name": "NoSQL journal of prophecies",
        "owner": "Delphy"
    }
}
----
====

====== Identifiers

The +_id+ field of a CouchDB document is directly used
to store the identifier columns mapped in the entities.
You can use any persistable Java type as identifier type, e.g. +String+ or +long+.

Hibernate OGM will convert the +@Id+ property into a +_id+ document field
so you can name the entity id like you want, it will always be stored into +_id+.

Note that you also can work with embedded ids (via +@EmbeddedId+),
but be aware of the fact that CouchDB doesn't support storing embedded structures in the +_id+ attribute.
Hibernate OGM thus will create a concatenated representation of the embedded id's properties in this case.

===== Associations

Hibernate OGM CouchDB provides two strategies to store navigation information for associations.
To switch between these strategies,
either use the +@AssocationStorage+ annotation (see <<ogm-couchdb-annotation-configuration>>),
the API for programmatic configuration (see <<ogm-couchdb-programmatic-configuration>>) or
specify a global default strategy via the +hibernate.ogm.datastore.document.association_storage+ configuration property.

The possible strategies are +IN_ENTITY+ (default) and +ASSOCIATION_DOCUMENT+.

====== In Entity strategy

With this strategy, Hibernate OGM directly stores the id(s)
of the other side of the association
into a field or an embedded document
depending if the mapping concerns a single object or a collection.
The field that stores the relationship information is named like the entity property.

.Java entity
====
[source, JAVA]
----
@Entity
public class AccountOwner {

    @Id
    private String id;

    @ManyToMany
    public Set<BankAccount> bankAccounts;

    //getters, setters, ...
----
====

.JSON representation
====
[source, JSON]
----
{
    "_id": "AccountOwner:id_:owner0001_",
    "_rev": "1-d1cd3b00a677a2e31cd0480a796e8480",
    "$type": "entity",
    "$table": "AccountOwner",
    "bankAccounts" : [
        { "bankAccounts_id" : "accountXYZ" }
    ]
}
----
====

====== Association document strategy

With this strategy, Hibernate OGM uses separate association documents
(with +$type+ set to "association") to store all navigation information.
Each assocation document is structure in 2 parts.
The first is the +_id+ field which contains the identifier information
of the association owner and the name of the association table.
The second part is the +rows+ field which stores (into an embedded collection) all ids
that the current instance is related to.

.Unidirectional relationship
====
[source, JSON]
----
{
   "_id": "AccountOwner_BankAccount:owners/_id_:4f5b48ad-f074-4a64-8cf4-1f9c54a33f76_",
   "_rev": "1-18ef25ec73c1942c45c868aa92f24f2c",
   "$type": "association",
   "rows": [
       {
           "bankAccounts_id": "7873a2a7-c77c-447c-b000-890f0a4dfa9a"
       }
   ]
}
----
====

For a bidirectional relationship, another document is created where ids are reversed.
Don't worry, Hibernate OGM takes care of keeping them in sync:

.Bidirectional relationship
====
[source, JSON]
----
{
   "_id": "AccountOwner_BankAccount:owners/_id_:4f5b48ad-f074-4a64-8cf4-1f9c54a33f76_",
   "_rev": "1-18ef25ec73c1942c45c868aa92f24f2c",
   "$type": "association",
   "rows": [
       {
           "bankAccounts_id": "7873a2a7-c77c-447c-b000-890f0a4dfa9a"
       }
   ]
}
{
   "_id": "AccountOwner_BankAccount:bankAccounts/_id_:7873a2a7-c77c-447c-b000-890f0a4dfa9a_",
   "_rev": "1-78e92f980745941a779abb914da65a6c",
   "$type": "association",
   "rows": [
       {
           "owners_id": "4f5b48ad-f074-4a64-8cf4-1f9c54a33f76"
       }
   ]
}
----
====

==== Transactions

CouchDB does not support transactions.
Only changes applied to the same document are done atomically.
A change applied to more than one document will not be applied atomically.
This problem is slightly mitigated by the fact that Hibernate OGM queues all changes
before applying them during flush time.
So the window of time used to write to CouchDB is smaller than what you would have done manually.

We recommend that you still use transaction demarcations with Hibernate OGM
to trigger the flush operation transparently (on commit).
But do not consider rollback as a possibility, this won't work.

==== Queries

Hibernate OGM is a work in progress
and we are actively working on JP-QL query support.

In the mean time, you have two strategies to query entities stored by Hibernate OGM:

* use native CouchDB queries
* use Hibernate Search

Because Hibernate OGM stores data in CouchDB in a natural way,
you can the HTTP client or REST library of your choice and execute queries (using CouchDB views)
on the datastore directly without involving Hibernate OGM.
The benefit of this approach is to use the query capabilities of CouchDB.
The drawback is that raw CouchDB documents will be returned and not managed entities.

The alternative approach is to index your entities with Hibernate Search.
That way, a set of secondary indexes independent of CouchDB is maintained by Hibernate Search
and you can write queries on top of them.
The benefit of this approach is an nice integration at the JPA / Hibernate API level
(managed entities are returned by the queries).
The drawback is that you need to store the Lucene indexes somewhere
(file system, infinispan grid etc).
Have a look at the Infinispan section for more info on how to use Hibernate Search.
