<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2012 Red Hat Inc. and/or its affiliates and other contributors
  ~ as indicated by the @authors tag. All rights reserved.
  ~ See the copyright.txt in the distribution for a
  ~ full listing of individual contributors.
  ~
  ~ This copyrighted material is made available to anyone wishing to use,
  ~ modify, copy, or redistribute it subject to the terms and conditions
  ~ of the GNU Lesser General Public License, v. 2.1.
  ~ This program is distributed in the hope that it will be useful, but WITHOUT A
  ~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  ~ PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  ~ You should have received a copy of the GNU Lesser General Public License,
  ~ v.2.1 along with this distribution; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ~ MA  02110-1301, USA.
  -->
<!--
    @author Guillaume Scheibel <guillaume.scheibel@gmail.com>
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../ogm.ent">
%BOOK_ENTITIES;
]>
<section>
  <title>MongoDB</title>

  <para><ulink url="http://www.mongodb.org">MongoDB</ulink> is a document
  oriented datastore written in C++ with strong emphasis on ease of
  use.</para>

  <section>
    <title>Configuring MongoDB</title>

    <para>This implementation is based upon the MongoDB Java driver, currently
    the supported version is &mongodbVersion;.</para>

    <para>The following properties are available to configure MongoDB
    support:</para>

    <table>
      <title>MongoDB datastore configuration properties</title>

      <tgroup cols="2">
        <colspec colwidth="30%"/>

        <colspec colwidth="70%"/>

        <thead>
          <row>
            <entry>Property</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>hibernate.ogm.datastore.provider</entry>

            <entry>To use MongoDB as a datastore provider, this property must
            be set to <literal>mongodb</literal></entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.host</entry>

            <entry>The hostname of the mongodb instance. The default value is
            <literal>127.0.0.1</literal></entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.port</entry>

            <entry>The port used by the mongodb instance. The default value is
            <literal>27017</literal></entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.database</entry>

            <entry>The database to connect to. This property has no default
            value.</entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.username</entry>

            <entry>The username used when connecting to the MongoDB server.
            This property has no default value.</entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.password</entry>

            <entry>The password used to connect to the MongoDB server. This
            property has no default value. This property is ignored if the
            username isn't specified.</entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.safe</entry>

            <entry>Defines the so-called safe mode in MongoDB. When set to
            <literal>false</literal>, the driver does not wait for the write
            operation to be applied before returning. This could lead to loss
            of writes. When set to <literal>true</literal>, the driver waits
            for the operation to succeed before returning. Note that this is
            slower than the unsafe mode. The default value is
            <literal>true</literal>.</entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.connection_timeout</entry>

            <entry>Defines the timeout used by the driver when the connection
            to the MongoDB instance is initiated. This configuration is
            expressed in milliseconds. The default value is
            <literal>5000</literal>.</entry>
          </row>

          <row>
            <entry>hibernate.ogm.mongodb.associations.store</entry>

            <entry>Defines the way OGM stores association information. There
            are three strategies to store association information.
            <literal>GLOBAL_COLLECTION</literal> stores the association
            information in a unique MongoDB collection for all associations.
            <literal>COLLECTION</literal> stores the association in a
            dedicated MongoDB collection per association.
            <literal>IN_ENTITY</literal> stores association information from
            within the entity. <literal>IN_ENTITY</literal> is the
            default.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <note>
      <para>The general policy in Hibernate OGM is to not go against the
      underlying NoSQL store. We have made an exception for MongoDB's write
      concern default setting - which is unsafe out of the box. Based on the
      typical use case of Hibernate OGM (domain models) and based on the
      production feedback we have received, we do consider MongoDB's default
      value to be dangerous.</para>
    </note>
  </section>

  <section>
    <title>Storage principles</title>

    <para>Hibernate OGM tries to make the mapping to the underlying datastore
    as natural as possible so that third party applications not using
    Hibernate OGM can still read and update the same datastore. We worked
    particularly hard on the MongoDB model to offer various classic mappings
    between your object model and the MongoDB documents.</para>

    <section>
      <title>Entities</title>

      <para>Entities are stored as MongoDB documents and not as BLOBs which
      means each entity property will be translated into a document field. You
      can use the name property of <classname>@Table</classname> and
      <classname>@Column</classname> annotation and so rename the collections
      and the document's field.</para>

      <para>Note that embedded objects are mapped as nested documents.</para>

      <example>
        <title>Example of an entity with an embedded object</title>

        <programlisting language="JAVA" role="JAVA">
@Entity
public class News {
    @Id
    private String id;
    private String title;
    @Column(name="desc")
    private String description;
    @Embedded
    private NewsPaper paper;
    
    //getters, setters ...
}

@Embeddable
public class NewsPaper {
    private String name;
    private String owner;
    //getters, setters ...
}
</programlisting>

        <programlisting language="JSON" role="JSON">
{
    "_id" : "1234-5678-0123-4567",
    "title": "On the merits of NoSQL",
    "desc": "This paper discuss why NoSQL will save the world for good",
    "paper": {
        "name": "NoSQL journal of prophecies",
        "owner": "Delphy"
    }
}
                    </programlisting>
      </example>

      <section>
        <title>Identifiers</title>

        <para>The <literal>_id</literal> field of a MongoDB document is
        directly used to store the identifier columns mapped in the entities.
        That means you can use simple identifiers (no matter the Java type
        used) as well as Embedded identifiers. Embedded identifiers are stored
        as embedded document into the <literal>_id</literal> field. Hibernate
        OGM will convert the <literal>@Id</literal> property into a
        <literal>_id</literal> document field so you can name the entity id
        like you want it will always be stored into <literal>_id</literal>
        (the recommended approach in MongoDB). That means in particular that
        MongoDB will automatically index your _id fields. Let's look at an
        example:</para>

        <example>
          <title>Example of an entity using Embedded id</title>

          <programlisting language="JAVA" role="JAVA">
@Entity
public class News {
    @EmbeddedId
    private NewsID newsId;
    //getters, setters ...
}

@Embeddable
public class NewsID implements Serializable {
    private String title;
    private String author;
    //getters, setters ...
}
                    </programlisting>

          <programlisting language="JSON" role="JSON">
{
    "_id" :{
        "title": "How does Hibernate OGM MongoDB work?",
        "author": "Guillaume"
    }
}
                    </programlisting>
        </example>
      </section>
    </section>

    <section>
      <title>Associations</title>

      <para>Hibernate OGM MongoDB proposes 3 strategies to store navigation
      information for associations. To switch between each of these
      strategies, use the
      <literal>hibernate.ogm.mongodb.associations.store</literal>
      configuration property. The three possible values are:</para>

      <itemizedlist>
        <listitem>
          <para>IN_ENTITY (default)</para>
        </listitem>

        <listitem>
          <para>GLOBAL_COLLECTION</para>
        </listitem>

        <listitem>
          <para>COLLECTION</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>In Entity strategy</title>

        <para>This strategy works pretty like the a foreign key in order
        terms, OGM will directly store the id of the other side of the
        association into a field or an embedded document depending if the
        mapping concerns a single object or a collection. The field that
        stores the relationship information is named like the entity
        property.</para>

        <example>
          <title>Java entity</title>

          <programlisting language="JAVA" role="JAVA">
@Entity
public class AccountOwner {
@Id
private String id;

@ManyToMany
public Set&lt;BankAccount&gt; bankAccounts;

//getters, setters, ...
                </programlisting>
        </example>

        <example>
          <title>JSON representation</title>

          <programlisting language="JSON" role="JSON">
{
    "_id" : "owner0001",
    "bankAccounts" : [
        { "bankAccounts_id" : "accountXYZ" }
    ]
}
                    </programlisting>
        </example>
      </section>

      <section>
        <title>Global collection strategy</title>

        <para>With this strategy, Hibernate OGM creates a single collection in
        which it will stores all navigation information for all associations.
        Each document of this collection is structure in 2 parts. The first is
        the <literal>_id</literal> field which contains the identifier
        information of the association owner and the name of the association
        table. The second part is the <literal>rows</literal> field which
        stores (into an embedded collection) all ids that the current instance
        is related to.</para>

        <example>
          <title>Unidirectional relationship</title>

          <programlisting language="JSON" role="JSON">
{
    "_id": {
        "owners_id": "owner0001",
        "table": "AccountOwner_BankAccount"
    },
    "rows": [
        { "bankAccounts_id": "accountXYZ" }
    ]
}
                    </programlisting>
        </example>

        <para>For a bidirectional relationship, another document is created
        where ids are reversed. Don't worry, Hibernate OGM takes care of
        keeping them in sync:</para>

        <example>
          <title>Bidirectional relationship</title>

          <programlisting language="JSON" role="JSON">
{
    "_id": {
        "owners_id": "owner0001",
        "table": "AccountOwner_BankAccount"
    },
    "rows": [{
        "bankAccounts_id": "accountXYZ"
        }]
}
{
    "_id": {
        "bankAccounts_id": "accountXYZ",
        "table": "AccountOwner_BankAccount"
    },
    "rows": [{
        "owners_id": "owner0001"
    }]
}
                    </programlisting>
        </example>
      </section>

      <section>
        <title>One collection per association strategy</title>

        <para>In this strategy, Hibernate OGM creates a MongoDB collection per
        association in which it will stores all navigation information for
        that particular association. This is the strategy closest to the
        relational model. If an entity A is related to B and C, 2 collections
        will be created. The name of this collection is made of the
        association table concatenated with <literal>associations_</literal>.
        For example, if the <classname>BankAccount</classname> and
        <classname>Owner</classname> are related, the collection used to store
        will be named <literal>associations_Owner_BankAccount</literal>. The
        prefix is useful to quickly identify the association collections from
        the entity collections. Each document of an association collection has
        the following structure: <itemizedlist>
            <listitem>
              <para><literal>_id</literal> contains the id of the owner of
              relationship</para>
            </listitem>

            <listitem>
              <para><literal>rows</literal> contains all the id of the related
              entities</para>
            </listitem>
          </itemizedlist></para>

        <example>
          <title>Unidirectional relationship</title>

          <programlisting language="JSON" role="JSON">
{
    "_id" : { "owners_id" : "owner0001" },
    "rows" : [
        { "bankAccounts_id" : "accountXYZ" }
    ]
}
                    </programlisting>
        </example>

        <example>
          <title>Bidirectional relationship</title>

          <programlisting language="JSON" role="JSON">
{
    "_id" : { "owners_id" : "owner0001" },
    "rows" : [
        { "bankAccounts_id" : "accountXYZ" }
    ]
}
{
    "_id" : { "bankAccounts_id" : "accountXYZ" },
    "rows" : [
        { "owners_id" : "owner0001" }
    ]
}
                    </programlisting>
        </example>
      </section>
    </section>
  </section>

    <section>
      <title>Transactions</title>

      <para>MongoDB does not support transaction. Only changes applied to the
      same document are done atomically. A change applied to more than one
      document will not be applied atomically. This problem is slightly
      mitigated by the fact that Hibernate OGM queues all changes before
      applying them during flush time. So the window of time used to write to
      MongoDB is smaller than what you would have done manually.</para>

      <para>We recommend that you still use transaction demarcations with
      Hibernate OGM to trigger the flush operation transparently (on commit).
      But do not consider rollback as a possibility, this won't work.</para>
    </section>

    <section>
      <title>Queries</title>

      <para>Hibernate OGM is a work in progress and we are actively working on
      JP-QL query support.</para>

      <para>In the mean time, you have two strategies to query entities stored
      by Hibernate OGM:</para>

      <itemizedlist>
        <listitem>
          <para>use native MongoDB queries</para>
        </listitem>

        <listitem>
          <para>use Hibernate Search</para>
        </listitem>
      </itemizedlist>

      <para>Because Hibernate OGM stores data in MongoDB in a natural way, you
      can use the MongoDB driver and execute queries on the datastore directly
      without involving Hibernate OGM. The benefit of this approach is to use
      the query capabilities of MongoDB. The drawback is that raw MongoDB
      documents will be returned and not managed entities.</para>

      <para>The alternative approach, is to index your entities with Hibernate
      Search. That way, a set of secondary indexes independent of MongoDB is
      maintained by Hibernate Search and you can write queries on top of them.
      The benefit of this approach is an nice integration at the JPA /
      Hibernate API level (managed entities are returned by the queries). The
      drawback is that you need to store the Lucene indexes somewhere (file
      system, infinispan grid etc). Have a look at the Infinispan section for
      more info on how to use Hibernate Search.</para>
    </section>

</section>
