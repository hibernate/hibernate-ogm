<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2011-2012 Red Hat Inc. and/or its affiliates and other contributors
  ~ as indicated by the @authors tag. All rights reserved.
  ~ See the copyright.txt in the distribution for a
  ~ full listing of individual contributors.
  ~
  ~ This copyrighted material is made available to anyone wishing to use,
  ~ modify, copy, or redistribute it subject to the terms and conditions
  ~ of the GNU Lesser General Public License, v. 2.1.
  ~ This program is distributed in the hope that it will be useful, but WITHOUT A
  ~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  ~ PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  ~ You should have received a copy of the GNU Lesser General Public License,
  ~ v.2.1 along with this distribution; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ~ MA  02110-1301, USA.
  -->
<!--
    @author Emmanuel Bernard <emmanuel@hibernate.org>
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../ogm.ent">
%BOOK_ENTITIES;
]>
<chapter id="ogm-architecture">
  <title>Architecture</title>

  <note>
    <para>Hibernate OGM defines an abstraction layer represented by
    <classname>DatastoreProvider</classname> and
    <classname>GridDialect</classname> to separate the OGM engine from the
    datastores interaction. It has successfully abstracted various key/value
    stores and MongoDB. We are working on testing it on other NoSQL
    families.</para>
  </note>

  <para>In this chapter we will will explore:</para>

  <itemizedlist>
    <listitem>
      <para>the general architecture</para>
    </listitem>

    <listitem>
      <para>how the data is persisted in the NoSQL datastore</para>
    </listitem>

    <listitem>
      <para>how we support JP-QL queries</para>
    </listitem>
  </itemizedlist>

  <para>Let's start with the general architecture.</para>

  <section>
    <title>General architecture</title>

    <para>Hibernate OGM is really made possible by the reuse of a few key
    components:</para>

    <itemizedlist>
      <listitem>
        <para>Hibernate ORM for JPA support</para>
      </listitem>

      <listitem>
        <para>Hibernate Search for indexing purposes</para>
      </listitem>

      <listitem>
        <para>the NoSQL drivers to interact with the underlying
        datastore</para>
      </listitem>

      <listitem>
        <para>Infinispan's Lucene directory to store indexed in Infinispan
        itself</para>
      </listitem>

      <listitem>
        <para>Hibernate OGM itself</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject role="html">
        <imagedata align="center" fileref="images/ogm-architecture.png"
                   format="PNG" role="html" scalefit="1"/>
      </imageobject>

      <imageobject role="fo">
        <imagedata align="center" depth=""
                   fileref="images/ogm-architecture.png" format="PNG"
                   role="fo" scalefit="1" width="12cm"/>
      </imageobject>

      <caption><para>General architecture</para></caption>
    </mediaobject>

    <para>Hibernate OGM reuses as much as possible from the Hibernate ORM
    infrastructure. There is no need to rewrite an entirely new JPA engine.
    The <classname>Persister</classname>s and the
    <classname>Loader</classname>s (two interfaces used by Hibernate ORM) have
    been rewritten to persist data in the NoSQL store. These implementations
    are the core of Hibernate OGM. We will see in <xref
    linkend="ogm-architecture-datapersisted"/> how the data is structured.
    </para>

    <para>The particularities between NoSQL stores are abstracted by the
    notion of a <classname>DatastoreProvider</classname> and a
    <classname>GridDialect</classname>. </para>

    <itemizedlist>
      <listitem>
        <para><classname>DatastoreProvider</classname> abstracts how to start
        and maintain a connection between Hibernate OGM and the
        datastore.</para>
      </listitem>

      <listitem>
        <para><classname>GridDialect</classname> abstracts how data itself
        including association is persisted.</para>
      </listitem>
    </itemizedlist>

    <para>Think of them as the JDBC layer for our NoSQL stores. </para>

    <para>Other than these, all the Create/Read/Update/Delete (CRUD)
    operations are implemented by the Hibernate ORM engine (object hydration
    and dehydration, cascading, lifecycle etc).</para>

    <para>As of today, we have implemented four datastore providers:</para>

    <itemizedlist>
      <listitem>
        <para>a Map based datastore provider (for testing)</para>
      </listitem>

      <listitem>
        <para>an Infinispan based datastore provider to persist your entities
        in Infinispan</para>
      </listitem>

      <listitem>
        <para>a EHCache based datastore provider to persist your entities in
        EHCache</para>
      </listitem>

      <listitem>
        <para>a MongoDB based datastore provider to persist data in a MongoDB
        database</para>
      </listitem>
    </itemizedlist>

    <para>To implement JP-QL queries, Hibernate OGM parses the JP-QL string
    and calls the appropriate translator functions to build a native query. If
    the query is too complex for the native capabilities of the NoSQL store,
    the Teiid query engine is used as an intermediary engine to implement the
    missing features (typically joins between entities, aggregation). Finally,
    if the underlying engine does not have any query support, we use Hibernate
    Search as an external query engine.</para>

    <para>Reality is a bit more nuanced, we will discuss the subject of
    querying in more details in <xref
    linkend="ogm-architecture-dataqueried"/>.</para>

    <para>Hibernate OGM best works in a JTA environment. The easiest solution
    is to deploy it on a Java EE container. Alternatively, you can use a
    standalone JTA <classname>TransactionManager</classname>. We do explain
    how to in <xref
    linkend="ogm-configuration-environments-standalonejta"/>.</para>

    <para>Let's now see how and in which structure data is persisted in the
    NoSQL data store.</para>
  </section>

  <section id="ogm-architecture-datapersisted">
    <title>How is data persisted</title>

    <para>Hibernate OGM tries to reuse as much as possible the relational
    model concepts (at least when they are practical and make sense in OGM's
    case). For very good reasons, the relational model brought peace in the
    database landscape over 30 years ago. In particular, Hibernate OGM
    inherits the following philosophy traits:</para>

    <itemizedlist>
      <listitem>
        <para>abstraction between the application object model and the
        persistent data model</para>
      </listitem>

      <listitem>
        <para>persist data as basic types</para>
      </listitem>

      <listitem>
        <para>keep the notion of primary key to address an entity</para>
      </listitem>

      <listitem>
        <para>keep the notion of foreign key to link two entities (not
        enforced)</para>
      </listitem>
    </itemizedlist>

    <para>If the application data model is too tightly coupled with your
    persistent data model a few issues arise including:</para>

    <itemizedlist>
      <listitem>
        <para>any change in the application object hierarchy / composition
        must be reflected in the persistent data</para>
      </listitem>

      <listitem>
        <para>any change in the application object model will require a
        migration at the data level</para>
      </listitem>

      <listitem>
        <para>any access to the data by another application ties both
        applications losing flexibility</para>
      </listitem>

      <listitem>
        <para>any access to the data from another platform become somewhat
        more challenging</para>
      </listitem>

      <listitem>
        <para>serializing entities leads to many additional problems (see note
        below)</para>
      </listitem>
    </itemizedlist>

    <note>
      <title>Why aren't entities serialized in the key/value entry</title>

      <para>There are a couple of reasons why serializing the entity directly
      in the datastore can lead to problems:</para>

      <itemizedlist>
        <listitem>
          <para>When entities are pointing to other entities are you storing
          the whole graph?</para>

          <para>Hint this can be quite big!</para>
        </listitem>

        <listitem>
          <para>If so, how do you guarantee object identity or even
          consistency amongst duplicated objects?</para>

          <para>It might make sense to store the same object graph from
          different root objects.</para>
        </listitem>

        <listitem>
          <para>What happens in case of class schema change?</para>

          <para>If you add or remove a property or include a superclass, you
          must migrate all entities in your datastore to avoid deserialization
          issues.</para>
        </listitem>
      </itemizedlist>
    </note>

    <para>Entities are stored as tuples of values by Hibernate OGM. More
    specifically, each entity is conceptually represented by a
    <classname>Map&lt;String,Object&gt;</classname> where the key represents
    the column name (often the property name but not always) and the value
    represents the column value as a basic type. We favor basic types over
    complex ones to increase portability (across platforms and across type /
    class schema evolution over time). For example a URL object is store as
    its String representation.</para>

    <para>The key identifying a given entity instance is is composed
    of:</para>

    <itemizedlist>
      <listitem>
        <para>the table name</para>
      </listitem>

      <listitem>
        <para>the primary key column name(s)</para>
      </listitem>

      <listitem>
        <para>the primary key column value(s)</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject role="html">
        <imagedata align="center" fileref="images/data-entity.png"
                   format="PNG" role="html"/>
      </imageobject>

      <caption><para>Storing entities</para></caption>
    </mediaobject>

    <para> The <classname>GridDialect</classname> specific to the NoSQL
    datastore you target is then responsible to convert this map into the most
    natural model:</para>

    <itemizedlist>
      <listitem>
        <para>for a key/value store or a data grid, we use the logical key as
        the key in the grid and we store the map as the value. Note that it's
        an approximation and some key/value providers will use more tailored
        approaches.</para>
      </listitem>

      <listitem>
        <para>for a document oriented store, the map is represented by a
        document and each entry in the map corresponds to a property in a
        document.</para>
      </listitem>
    </itemizedlist>

    <para>Associations are also stored as tuple as well or more specifically
    as a set of tuples. Hibernate OGM stores the information necessary to
    navigate from an entity to its associations. This is a departure from the
    pure relational model but it ensures that association data is reachable
    via key lookups based on the information contained in the entity tuple we
    want to navigate from. Note that this leads to some level of duplication
    as information has to be stored for both sides of the association.</para>

    <para>The key in which association data are stored is composed of:</para>

    <itemizedlist>
      <listitem>
        <para>the table name</para>
      </listitem>

      <listitem>
        <para>the column name(s) representing the foreign key to the entity we
        come from</para>
      </listitem>

      <listitem>
        <para>the column value(s) representing the foreign key to the entity
        we come from</para>
      </listitem>
    </itemizedlist>

    <para>Using this approach, we favor fast read and (slightly) slower
    writes.</para>

    <mediaobject>
      <imageobject role="html">
        <imagedata align="center" fileref="images/data-association.png"
                   format="PNG" role="html"/>
      </imageobject>

      <imageobject role="fo">
        <imagedata align="center" depth=""
                   fileref="images/data-association.png" format="PNG"
                   role="fo" scalefit="1" width="12cm"/>
      </imageobject>

      <caption><para>Storing associations</para></caption>
    </mediaobject>

    <para>Note that this approach has benefits and drawbacks:</para>

    <itemizedlist>
      <listitem>
        <para>it ensures that all CRUD operations are doable via key
        lookups</para>
      </listitem>

      <listitem>
        <para>it favors reads over writes (for associations)</para>
      </listitem>

      <listitem>
        <para>but it duplicates data</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>We might offer alternative association data persistence options in
      the future based on feedback.</para>
    </note>

    <para>Again, there are specificities in how data is inherently stored in
    the specific NoSQL store. For example, in document oriented stores, the
    association information including the identifier to the associated
    entities can be stored in the entity owning the association. This is a
    more natural model for documents.</para>

    <para>TODO: this sentence might be worth a diagram to show the difference
    with the key/value store.</para>

    <para>Some identifiers require to store a seed in the datastore (like
    sequences for examples). The seed is stored in the value whose key is
    composed of:</para>

    <itemizedlist>
      <listitem>
        <para>the table name</para>
      </listitem>

      <listitem>
        <para>the column name representing the segment</para>
      </listitem>

      <listitem>
        <para>the column value representing the segment</para>
      </listitem>
    </itemizedlist>

    <para>Make sure to check the chapter dedicated to the NoSQL store you
    target to find the specificities.</para>

    <para>Many NoSQL stores have no notion of schema. Likewise, the tuple
    stored by Hibernate OGM is not tied to a particular schema: the tuple is
    represented by a <classname>Map</classname>, not a typed
    <classname>Map</classname> specific to a given entity type. Nevertheless,
    JPA does describe a schema thanks to:</para>

    <itemizedlist>
      <listitem>
        <para>the class schema</para>
      </listitem>

      <listitem>
        <para>the JPA physical annotations like <classname>@Table</classname>
        and <classname>@Column</classname>.</para>
      </listitem>
    </itemizedlist>

    <para>While tied to the application, it offers some robustness and
    explicit understanding when the schema is changed as the schema is right
    in front of the developers' eyes. This is an intermediary model between
    the strictly typed relational model and the totally schema-less approach
    pushed by some NoSQL families.</para>
  </section>

  <section id="ogm-architecture-dataqueried">
    <title>How is data queried</title>

    <note>
      <para>Query support is in active development. This section describes
      where the project is going.</para>
    </note>

    <para>Since Hibernate OGM wants to offer all of JPA, it needs to support
    JP-QL queries. Hibernate OGM parses the JP-QL query string and extracts
    its meaning. From there, several options are available depending of the
    capabilities of the NoSQL store you target:</para>

    <itemizedlist>
      <listitem>
        <para>it directly delegates the native query generation to the
        datastore specific query translator implementation</para>
      </listitem>

      <listitem>
        <para>it uses Teiid as an intermediary engine, Teiid delegating parts
        of the query to the datastore specific query translator
        implementation</para>
      </listitem>

      <listitem>
        <para>it uses Hibernate Search as a query engine to execute the
        query</para>
      </listitem>
    </itemizedlist>

    <para>If the NoSQL datastore has some query capabilities and if the JP-QL
    query is simple enough to be executed by the datastore, then the JP-QL
    parser directly pushes the query generation to the NoSQL specific query
    translator. The query returns the list of matching identifiers and uses
    Hibernate OGM to return managed objects.</para>

    <para>Some of the JP-QL features are not supported by NoSQL solutions. Two
    typical examples are joins between entities - which you should limit
    anyways in a NoSQL environment - and aggregations like average, max, min
    etc. When the NoSQL store does not support the query, we use Teiid - a
    database federation engine - to build simpler queries executed to the
    datastore and do the join or aggregation in Teiid itself.</para>

    <para>Finally some NoSQL stores have no or too poor query support. In this
    situation, Hibernate OGM can use Hibernate Search as its indexing and
    query engine. Hibernate Search is able to index and query objects -
    entities - and run full-text queries. It uses the well known Apache Lucene
    to do that but add a few interesting characteristics like clustering
    support and an object oriented abstraction including an object oriented
    query DSL. Let's have a look at the architecture of Hibernate OGM when
    using Hibernate Search:</para>

    <mediaobject>
      <imageobject role="html">
        <imagedata align="center"
                   fileref="images/ogm-architecture-with-hsearch.png"
                   format="PNG" role="html" scalefit="1"/>
      </imageobject>

      <imageobject role="fo">
        <imagedata align="center" depth=""
                   fileref="images/ogm-architecture-with-hsearch.png"
                   format="PNG" role="fo" scalefit="1" width="12cm"/>
      </imageobject>

      <caption><para>Using Hibernate Search as query engine - greyed areas are
      blocks already present in Hibernate OGM's architecture</para></caption>
    </mediaobject>

    <para>In this situation, Hibernate ORM Core pushes change events to
    Hibernate Search which will index entities accordingly and keep the index
    and the datastore in sync. The JP-QL query parser delegates the query
    translation to the Hibernate Search query translator and executes the
    query on top of the Lucene indexes. Indexes can be stored in various
    fashion:</para>

    <itemizedlist>
      <listitem>
        <para>on a file system (the default in Lucene)</para>
      </listitem>

      <listitem>
        <para>in Infinispan via the Infinispan Lucene directory
        implementation: the index is then distributed across several servers
        transparently</para>
      </listitem>

      <listitem>
        <para>in NoSQL stores like Voldemort that can natively store Lucene
        indexes</para>
      </listitem>

      <listitem>
        <para>in NoSQL stores that can be used as overflow to Infinispan: in
        this case Infinispan is used as an intermediary layer to serve the
        index efficiently but persists the index in another NoSQL
        store.</para>
      </listitem>
    </itemizedlist>

    <para>Note that for complex queries involving joins or aggregation,
    Hibernate OGM, can use Teiid as an intermediary query engine that will
    delegate to Hibernate Search.</para>

    <para>While all these options add some complexity, they also offer a lot
    of flexibility to address queries in the most tailored way for your
    project. A detail on the various options will be discussed in XXX (hsearch
    options chapter).</para>

    <para>Note that you can use Hibernate Search even if you do plan to use
    the NoSQL datastore query capabilities. Hibernate Search offers a few
    interesting options:</para>

    <itemizedlist>
      <listitem>
        <para>clusterability</para>
      </listitem>

      <listitem>
        <para>full-text queries - ie Google for your entities</para>
      </listitem>

      <listitem>
        <para>geospatial queries</para>
      </listitem>

      <listitem>
        <para>query faceting (ie dynamic categorization of the query results
        by price, brand etc)</para>
      </listitem>
    </itemizedlist>

    <note>
      <title>What's the progress status on queries?</title>

      <para>Well... now is a good time to remind you that Hibernate OGM is
      open source and that contributing to such cutting edge project is a lot
      of fun. Check out <xref linkend="ogm-howtocontribute"/> for more
      details. </para>

      <para>But to answer your question, we have finished the skeleton of the
      architecture as well as the JP-QL parser implementation. The Hibernate
      Search query translator can execute simple queries already. However, we
      do not yet have a NoSQL specific query translator but the approach is
      quite clear to us. Teiid for complex queries is also not integrated but
      work is being done in the Teiid project to facilitate that integration
      in the future. Native Hibernate Search queries are fully
      supported.</para>
    </note>
  </section>
</chapter>
