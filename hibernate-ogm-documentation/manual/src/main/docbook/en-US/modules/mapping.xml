<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Hibernate, Relational Persistence for Idiomatic Java
  ~
  ~ JBoss, Home of Professional Open Source
  ~ Copyright 2011 Red Hat Inc. and/or its affiliates and other contributors
  ~ as indicated by the @authors tag. All rights reserved.
  ~ See the copyright.txt in the distribution for a
  ~ full listing of individual contributors.
  ~
  ~ This copyrighted material is made available to anyone wishing to use,
  ~ modify, copy, or redistribute it subject to the terms and conditions
  ~ of the GNU Lesser General Public License, v. 2.1.
  ~ This program is distributed in the hope that it will be useful, but WITHOUT A
  ~ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  ~ PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  ~ You should have received a copy of the GNU Lesser General Public License,
  ~ v.2.1 along with this distribution; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  ~ MA  02110-1301, USA.
  -->
<!--
    @author Emmanuel Bernard <emmanuel@hibernate.org>
    @author Nicolas Helleringer <nicolas.helleringer@novacodex.net>
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../ogm.ent">
%BOOK_ENTITIES;
]>
<chapter id="ogm-mapping">
  <title>Map your entities</title>

  <para>Talk about supported approaches (properties, embedded objects,
  inheritance</para>

  <para>Talk about associations</para>

  <para>Talk about identifier recommendations</para>

  <section>
    <title>Supported entity mapping</title>

    <para>This section is a work in progress, if you find something that does
    not work as expected, let us know and we will update it (and fix the
    problem of course).</para>

    <para>Pretty much all entity related constructs should work out of the box
    in Hibernate OGM. <classname>@Entity</classname>,
    <classname>@Table</classname>, <classname>@Column</classname>,
    <classname>@Enumarated</classname>, <classname>@Temporal</classname>,
    <classname>@Cacheable</classname> and the like will work as expected. If
    you want an example, check out <xref linkend="ogm-gettingstarted"/> or the
    documentation of Hibernate ORM. Let's concentrate of the features that
    differ or are simply not supported by Hibernate OGM.</para>

    <para>The various inheritance strategies are not supported by Hibernate
    OGM, only the table per concrete class strategy is used. This is not so
    much a limitation but rather an acknowledgment of the dynamic nature of
    NoSQL schemas. If you feel the need to support other strategies, let us
    know (see <xref linkend="ogm-howtocontribute-contribute"/>). Simply do not
    use <classname>@Inheritance</classname> nor
    <classname>@DiscriminatorColumn</classname>.</para>

    <para>Secondary tables are not supported by Hibernate OGM at the moment.
    If you have needs for this feature, let us know (see <xref
    linkend="ogm-howtocontribute-contribute"/>).</para>

    <para>All SQL related constructs as well as HQL centered mapping are not
    supported in Hibernate OGM. Here is a list of feature that will not
    work:</para>

    <itemizedlist>
      <listitem>
        <para>Named queries</para>
      </listitem>

      <listitem>
        <para>Native queries</para>
      </listitem>
    </itemizedlist>

    <para>All standard JPA id generators are supported: IDENTITY, SEQUENCE,
    TABLE and AUTO. If you need support for additional generators, let us know
    (see <xref linkend="ogm-howtocontribute-contribute"/>). We recommend you
    use a UUID based generator as this type of generator allows maximum
    scalability to the underlying data grid as no cluster-wide counter is
    necessary.</para>

    <example>
      <title>Using a UUID generator</title>

      <programlisting language="JAVA" role="JAVA">@Entity
public class Breed {

    @Id @GeneratedValue(generator = "uuid")
    @GenericGenerator(name="uuid", strategy="uuid2")
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    private String id;

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    private String name;
}</programlisting>
    </example>
  </section>

  <section id="ogm-mapping-supported-types">
    <title>Supported Types</title>

    <para>Most Java built-in types as supported at this stage. However, custom
    types (<classname>@Type</classname>) are not supported.</para>

    <section id="ogm-mapping-supported-types-native-mapped">
      <title>Types mapped as native Java Types</title>

      <para>A few types are supported natively (ie serialized as is in the
      tuple data structure):</para>

      <itemizedlist>
        <listitem>
          <para>Boolean</para>
        </listitem>

        <listitem>
          <para>Byte</para>
        </listitem>

        <listitem>
          <para>Calendar (this may change)</para>
        </listitem>

        <listitem>
          <para>Class (this may change)</para>
        </listitem>

        <listitem>
          <para>Date (this may change)</para>
        </listitem>

        <listitem>
          <para>Double</para>
        </listitem>

        <listitem>
          <para>Integer</para>
        </listitem>

        <listitem>
          <para>Long</para>
        </listitem>

        <listitem>
          <para>Byte Array</para>
        </listitem>

        <listitem>
          <para>String</para>
        </listitem>
      </itemizedlist>

      <warning>
        <para>This list is subject to change and specifically be reduced to a
        smaller set of core types.</para>
      </warning>
    </section>

    <section id="ogm-mapping-supported-types-string-mapped">
      <title>Types mapped as Strings</title>

      <para>For non basic Java types support, OGM stores the data of the
      object as a String in the data store. Serialisation to a String value is
      done with cross platform compatibility in mind when required.</para>

      <itemizedlist>
        <listitem>
          <para>BigDecimal (mapped as scientific notation)</para>
        </listitem>

        <listitem>
          <para>BigInteger</para>
        </listitem>

        <listitem>
          <para>Url (as described by RFC 1738 and returned by toString of the
          Java URL type)</para>
        </listitem>

        <listitem>
          <para>UUID stored as described by RFC 4122</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Supported association mapping</title>

    <para>All association types are supported
    (<classname>@OneToOne</classname>, <classname>@OneToMany</classname>,
    <classname>@ManyToOne</classname>, <classname>@ManyToMany</classname>).
    Likewise, all collection types are supported (<classname>Set</classname>,
    <classname>Map</classname>, <classname>List</classname>). The way
    Hibernate OGM stores association information is however quite different
    than the traditional RDBMS representation. Check <xref
    linkend="ogm-architecture-datapersisted"/> for more information.</para>

    <para>Keep in mind that collections with many entries won't perform very
    well in Hibernate OGM (at least today) as all of the association
    navigation for a given entity is stored in a single key. If your
    collection is made of 1 million elements, Hibernate OGM stores 1 million
    tuples in the association key.</para>
  </section>
</chapter>
